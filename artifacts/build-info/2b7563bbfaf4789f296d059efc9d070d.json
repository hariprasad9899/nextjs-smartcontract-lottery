{"id":"2b7563bbfaf4789f296d059efc9d070d","_format":"hh-sol-build-info-1","solcVersion":"0.8.7","solcLongVersion":"0.8.7+commit.e28d00a7","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n}\n"},"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"contracts/Raffle.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\n\r\n// Error codes\r\n\r\nerror Raffle__NotEnoughEthEntered();\r\nerror Raffle__NotOpen();\r\n\r\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\r\n    // enum\r\n    enum RaffleState {\r\n        OPEN,\r\n        CALCULATING\r\n    }\r\n\r\n    // State Variables\r\n    // (coordinator, gaslane,callbackgaslimit,subscriptionid,numofwords,requestconfirmations)\r\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinatorV2;\r\n    bytes32 private immutable i_gasLane;\r\n    uint64 private immutable i_callbackGasLimit;\r\n    uint32 private immutable i_subscriptionId;\r\n    uint16 constant REQUEST_CONFIRMATIONS = 3;\r\n    uint16 constant NUM_WORDS = 1;\r\n\r\n    // Events\r\n    event RaffleEntered(address indexed player);\r\n\r\n    // Lottery Variables\r\n    // (entrancefee, players,recentwinner,rafflestate,lasttimestamp,interval)\r\n    uint256 private immutable i_entranceFee;\r\n    address payable[] private s_players;\r\n    address private s_recentWinner;\r\n    RaffleState private s_raffleState;\r\n    uint256 private s_lastTimeStamp;\r\n    uint32 private immutable i_interval;\r\n\r\n    // order\r\n    // 1. vrfcoor 2. entrfee 3. gaslane 4. subid 5. callbacgas 6.interval\r\n    constructor(\r\n        address vrfCoordinatorV2,\r\n        uint256 entranceFee,\r\n        bytes32 gasLane,\r\n        uint32 subscriptionId,\r\n        uint32 callbackGasLimit,\r\n        uint32 interval\r\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\r\n        i_vrfCoordinatorV2 = VRFCoordinatorV2Interface(vrfCoordinatorV2);\r\n        i_entranceFee = entranceFee;\r\n        i_gasLane = gasLane;\r\n        i_subscriptionId = subscriptionId;\r\n        i_callbackGasLimit = callbackGasLimit;\r\n        i_interval = interval;\r\n        s_lastTimeStamp = block.timestamp;\r\n        s_raffleState = RaffleState.OPEN;\r\n    }\r\n\r\n    function enterRaffle() public payable {\r\n        if (msg.value < i_entranceFee) {\r\n            revert Raffle__NotEnoughEthEntered();\r\n        }\r\n        if (s_raffleState != RaffleState.OPEN) {\r\n            revert Raffle__NotOpen();\r\n        }\r\n        s_players.push(payable(msg.sender));\r\n        emit RaffleEntered(msg.sender);\r\n    }\r\n\r\n    function checkUpkeep(\r\n        bytes calldata checkData\r\n    ) external override returns (bool upkeepNeeded, bytes memory performData) {\r\n        return (upkeepNeeded, \"0x0\");\r\n    }\r\n\r\n    function performUpkeep(bytes calldata /*performData*/) external override {}\r\n\r\n    function fulfillRandomWords(\r\n        uint256 /*requestId*/,\r\n        uint256[] memory randomWords\r\n    ) internal override {}\r\n}\r\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/Raffle.sol:74:9:\n   |\n74 |         bytes calldata checkData\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2458,"file":"contracts/Raffle.sol","start":2434},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> contracts/Raffle.sol:73:5:\n   |\n73 |     function checkUpkeep(\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":2585,"file":"contracts/Raffle.sol","start":2403},"type":"Warning"}],"sources":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[57]},"id":58,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"57:5275:0","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":57,"linearizedBaseContracts":[57],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:0","nodeType":"ContractDefinition","nodes":[{"id":8,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:0","nodeType":"ErrorDefinition","parameters":{"id":7,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"have","nameLocation":"5413:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5405:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6,"mutability":"mutable","name":"want","nameLocation":"5427:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5419:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:0"},"src":"5373:60:0"},{"constant":false,"id":10,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5462:14:0","nodeType":"VariableDeclaration","scope":57,"src":"5436:40:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"5436:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":20,"nodeType":"Block","src":"5593:43:0","statements":[{"expression":{"id":18,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":16,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"5599:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":17,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"5616:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5599:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":19,"nodeType":"ExpressionStatement","src":"5599:32:0"}]},"documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"5481:72:0","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":21,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5576:15:0","nodeType":"VariableDeclaration","scope":21,"src":"5568:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"5568:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5567:25:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"5593:0:0"},"scope":57,"src":"5556:80:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":22,"nodeType":"StructuredDocumentation","src":"5640:686:0","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":30,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6338:18:0","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"requestId","nameLocation":"6365:9:0","nodeType":"VariableDeclaration","scope":30,"src":"6357:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":23,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"randomWords","nameLocation":"6393:11:0","nodeType":"VariableDeclaration","scope":30,"src":"6376:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"6376:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":26,"nodeType":"ArrayTypeName","src":"6376:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6356:49:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"6422:0:0"},"scope":57,"src":"6329:94:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":55,"nodeType":"Block","src":"6707:167:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":38,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6717:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6717:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":40,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6731:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6717:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":49,"nodeType":"IfStatement","src":"6713:109:0","trueBody":{"id":48,"nodeType":"Block","src":"6747:75:0","statements":[{"errorCall":{"arguments":[{"expression":{"id":43,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6788:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6788:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":45,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6800:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":42,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"6762:25:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6762:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47,"nodeType":"RevertStatement","src":"6755:60:0"}]}},{"expression":{"arguments":[{"id":51,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"6846:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":52,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"6857:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":50,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"6827:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6827:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":54,"nodeType":"ExpressionStatement","src":"6827:42:0"}]},"functionSelector":"1fe543e3","id":56,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6627:21:0","nodeType":"FunctionDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"requestId","nameLocation":"6657:9:0","nodeType":"VariableDeclaration","scope":56,"src":"6649:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":31,"name":"uint256","nodeType":"ElementaryTypeName","src":"6649:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":35,"mutability":"mutable","name":"randomWords","nameLocation":"6685:11:0","nodeType":"VariableDeclaration","scope":56,"src":"6668:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":33,"name":"uint256","nodeType":"ElementaryTypeName","src":"6668:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":34,"nodeType":"ArrayTypeName","src":"6668:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6648:49:0"},"returnParameters":{"id":37,"nodeType":"ParameterList","parameters":[],"src":"6707:0:0"},"scope":57,"src":"6618:256:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":58,"src":"5333:1543:0","usedErrors":[8]}],"src":"32:6845:0"},"id":0},"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol","exportedSymbols":{"KeeperCompatibleInterface":[76]},"id":77,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":59,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":76,"linearizedBaseContracts":[76],"name":"KeeperCompatibleInterface","nameLocation":"67:25:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"97:985:1","text":" @notice method that is simulated by the keepers to see if any work actually\n needs to be performed. This method does does not actually need to be\n executable, and since it is only ever simulated it can consume lots of gas.\n @dev To ensure that it is never called, you may want to add the\n cannotExecute modifier from KeeperBase to your implementation of this\n method.\n @param checkData specified in the upkeep registration so it is always the\n same for a registered upkeep. This can easily be broken down into specific\n arguments using `abi.decode`, so multiple upkeeps can be registered on the\n same contract and easily differentiated by the contract.\n @return upkeepNeeded boolean to indicate whether the keeper should call\n performUpkeep or not.\n @return performData bytes that the keeper should call performUpkeep with, if\n upkeep is needed. If you would like to encode data to decode later, try\n `abi.encode`."},"functionSelector":"6e04ff0d","id":69,"implemented":false,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"1094:11:1","nodeType":"FunctionDefinition","parameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"checkData","nameLocation":"1121:9:1","nodeType":"VariableDeclaration","scope":69,"src":"1106:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":61,"name":"bytes","nodeType":"ElementaryTypeName","src":"1106:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1105:26:1"},"returnParameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"1155:12:1","nodeType":"VariableDeclaration","scope":69,"src":"1150:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":64,"name":"bool","nodeType":"ElementaryTypeName","src":"1150:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"performData","nameLocation":"1182:11:1","nodeType":"VariableDeclaration","scope":69,"src":"1169:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":66,"name":"bytes","nodeType":"ElementaryTypeName","src":"1169:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1149:45:1"},"scope":76,"src":"1085:110:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":70,"nodeType":"StructuredDocumentation","src":"1199:1003:1","text":" @notice method that is actually executed by the keepers, via the registry.\n The data returned by the checkUpkeep simulation will be passed into\n this method to actually be executed.\n @dev The input to this method should not be trusted, and the caller of the\n method should not even be restricted to any single registry. Anyone should\n be able call it, and the input should be validated, there is no guarantee\n that the data passed in is the performData returned from checkUpkeep. This\n could happen due to malicious keepers, racing keepers, or simply a state\n change while the performUpkeep transaction is waiting for confirmation.\n Always validate the data passed in.\n @param performData is the data which was passed back from the checkData\n simulation. If it is encoded, it can easily be decoded into other types by\n calling `abi.decode`. This data should not be trusted, and should be\n validated against the contract's current state."},"functionSelector":"4585e33b","id":75,"implemented":false,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"2214:13:1","nodeType":"FunctionDefinition","parameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"performData","nameLocation":"2243:11:1","nodeType":"VariableDeclaration","scope":75,"src":"2228:26:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":71,"name":"bytes","nodeType":"ElementaryTypeName","src":"2228:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2227:28:1"},"returnParameters":{"id":74,"nodeType":"ParameterList","parameters":[],"src":"2264:0:1"},"scope":76,"src":"2205:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":77,"src":"57:2210:1","usedErrors":[]}],"src":"32:2236:1"},"id":1},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[165]},"id":166,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":78,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:2"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":165,"linearizedBaseContracts":[165],"name":"VRFCoordinatorV2Interface","nameLocation":"67:25:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":79,"nodeType":"StructuredDocumentation","src":"97:267:2","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":89,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"376:16:2","nodeType":"FunctionDefinition","parameters":{"id":80,"nodeType":"ParameterList","parameters":[],"src":"392:2:2"},"returnParameters":{"id":88,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":89,"src":"437:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":81,"name":"uint16","nodeType":"ElementaryTypeName","src":"437:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":84,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":89,"src":"451:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":83,"name":"uint32","nodeType":"ElementaryTypeName","src":"451:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":87,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":89,"src":"465:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":85,"name":"bytes32","nodeType":"ElementaryTypeName","src":"465:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":86,"nodeType":"ArrayTypeName","src":"465:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"429:58:2"},"scope":165,"src":"367:121:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"492:1511:2","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":105,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"2015:18:2","nodeType":"FunctionDefinition","parameters":{"id":101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"keyHash","nameLocation":"2047:7:2","nodeType":"VariableDeclaration","scope":105,"src":"2039:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":91,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2039:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":94,"mutability":"mutable","name":"subId","nameLocation":"2067:5:2","nodeType":"VariableDeclaration","scope":105,"src":"2060:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":93,"name":"uint64","nodeType":"ElementaryTypeName","src":"2060:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":96,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2085:27:2","nodeType":"VariableDeclaration","scope":105,"src":"2078:34:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":95,"name":"uint16","nodeType":"ElementaryTypeName","src":"2078:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":98,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2125:16:2","nodeType":"VariableDeclaration","scope":105,"src":"2118:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":97,"name":"uint32","nodeType":"ElementaryTypeName","src":"2118:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":100,"mutability":"mutable","name":"numWords","nameLocation":"2154:8:2","nodeType":"VariableDeclaration","scope":105,"src":"2147:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":99,"name":"uint32","nodeType":"ElementaryTypeName","src":"2147:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2033:133:2"},"returnParameters":{"id":104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103,"mutability":"mutable","name":"requestId","nameLocation":"2193:9:2","nodeType":"VariableDeclaration","scope":105,"src":"2185:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":102,"name":"uint256","nodeType":"ElementaryTypeName","src":"2185:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2184:19:2"},"scope":165,"src":"2006:198:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"2208:384:2","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":111,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2604:18:2","nodeType":"FunctionDefinition","parameters":{"id":107,"nodeType":"ParameterList","parameters":[],"src":"2622:2:2"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":109,"mutability":"mutable","name":"subId","nameLocation":"2650:5:2","nodeType":"VariableDeclaration","scope":111,"src":"2643:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":108,"name":"uint64","nodeType":"ElementaryTypeName","src":"2643:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2642:14:2"},"scope":165,"src":"2595:62:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":112,"nodeType":"StructuredDocumentation","src":"2661:381:2","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":126,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3054:15:2","nodeType":"FunctionDefinition","parameters":{"id":115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":114,"mutability":"mutable","name":"subId","nameLocation":"3077:5:2","nodeType":"VariableDeclaration","scope":126,"src":"3070:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":113,"name":"uint64","nodeType":"ElementaryTypeName","src":"3070:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3069:14:2"},"returnParameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":117,"mutability":"mutable","name":"balance","nameLocation":"3133:7:2","nodeType":"VariableDeclaration","scope":126,"src":"3126:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":116,"name":"uint96","nodeType":"ElementaryTypeName","src":"3126:6:2","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":119,"mutability":"mutable","name":"reqCount","nameLocation":"3155:8:2","nodeType":"VariableDeclaration","scope":126,"src":"3148:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":118,"name":"uint64","nodeType":"ElementaryTypeName","src":"3148:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":121,"mutability":"mutable","name":"owner","nameLocation":"3179:5:2","nodeType":"VariableDeclaration","scope":126,"src":"3171:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":120,"name":"address","nodeType":"ElementaryTypeName","src":"3171:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":124,"mutability":"mutable","name":"consumers","nameLocation":"3209:9:2","nodeType":"VariableDeclaration","scope":126,"src":"3192:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"3192:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":123,"nodeType":"ArrayTypeName","src":"3192:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3118:106:2"},"scope":165,"src":"3045:180:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"3229:164:2","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":134,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3405:32:2","nodeType":"FunctionDefinition","parameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"subId","nameLocation":"3445:5:2","nodeType":"VariableDeclaration","scope":134,"src":"3438:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":128,"name":"uint64","nodeType":"ElementaryTypeName","src":"3438:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":131,"mutability":"mutable","name":"newOwner","nameLocation":"3460:8:2","nodeType":"VariableDeclaration","scope":134,"src":"3452:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":130,"name":"address","nodeType":"ElementaryTypeName","src":"3452:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3437:32:2"},"returnParameters":{"id":133,"nodeType":"ParameterList","parameters":[],"src":"3478:0:2"},"scope":165,"src":"3396:83:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"3483:212:2","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":140,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3707:31:2","nodeType":"FunctionDefinition","parameters":{"id":138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":137,"mutability":"mutable","name":"subId","nameLocation":"3746:5:2","nodeType":"VariableDeclaration","scope":140,"src":"3739:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":136,"name":"uint64","nodeType":"ElementaryTypeName","src":"3739:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3738:14:2"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[],"src":"3761:0:2"},"scope":165,"src":"3698:64:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":141,"nodeType":"StructuredDocumentation","src":"3766:170:2","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":148,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3948:11:2","nodeType":"FunctionDefinition","parameters":{"id":146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":143,"mutability":"mutable","name":"subId","nameLocation":"3967:5:2","nodeType":"VariableDeclaration","scope":148,"src":"3960:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":142,"name":"uint64","nodeType":"ElementaryTypeName","src":"3960:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":145,"mutability":"mutable","name":"consumer","nameLocation":"3982:8:2","nodeType":"VariableDeclaration","scope":148,"src":"3974:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":144,"name":"address","nodeType":"ElementaryTypeName","src":"3974:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3959:32:2"},"returnParameters":{"id":147,"nodeType":"ParameterList","parameters":[],"src":"4000:0:2"},"scope":165,"src":"3939:62:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":149,"nodeType":"StructuredDocumentation","src":"4005:172:2","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":156,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4189:14:2","nodeType":"FunctionDefinition","parameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":151,"mutability":"mutable","name":"subId","nameLocation":"4211:5:2","nodeType":"VariableDeclaration","scope":156,"src":"4204:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":150,"name":"uint64","nodeType":"ElementaryTypeName","src":"4204:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":153,"mutability":"mutable","name":"consumer","nameLocation":"4226:8:2","nodeType":"VariableDeclaration","scope":156,"src":"4218:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"4218:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4203:32:2"},"returnParameters":{"id":155,"nodeType":"ParameterList","parameters":[],"src":"4244:0:2"},"scope":165,"src":"4180:65:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":157,"nodeType":"StructuredDocumentation","src":"4249:140:2","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":164,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4401:18:2","nodeType":"FunctionDefinition","parameters":{"id":162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":159,"mutability":"mutable","name":"subId","nameLocation":"4427:5:2","nodeType":"VariableDeclaration","scope":164,"src":"4420:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":158,"name":"uint64","nodeType":"ElementaryTypeName","src":"4420:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":161,"mutability":"mutable","name":"to","nameLocation":"4442:2:2","nodeType":"VariableDeclaration","scope":164,"src":"4434:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":160,"name":"address","nodeType":"ElementaryTypeName","src":"4434:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4419:26:2"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[],"src":"4454:0:2"},"scope":165,"src":"4392:63:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":166,"src":"57:4400:2","usedErrors":[]}],"src":"32:4426:2"},"id":2},"contracts/Raffle.sol":{"ast":{"absolutePath":"contracts/Raffle.sol","exportedSymbols":{"KeeperCompatibleInterface":[76],"Raffle":[339],"Raffle__NotEnoughEthEntered":[172],"Raffle__NotOpen":[174],"VRFConsumerBaseV2":[57],"VRFCoordinatorV2Interface":[165]},"id":340,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":167,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"35:23:3"},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","id":168,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":340,"sourceUnit":58,"src":"62:61:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol","id":169,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":340,"sourceUnit":77,"src":"125:80:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","id":170,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":340,"sourceUnit":166,"src":"207:80:3","symbolAliases":[],"unitAlias":""},{"id":172,"name":"Raffle__NotEnoughEthEntered","nameLocation":"315:27:3","nodeType":"ErrorDefinition","parameters":{"id":171,"nodeType":"ParameterList","parameters":[],"src":"342:2:3"},"src":"309:36:3"},{"id":174,"name":"Raffle__NotOpen","nameLocation":"353:15:3","nodeType":"ErrorDefinition","parameters":{"id":173,"nodeType":"ParameterList","parameters":[],"src":"368:2:3"},"src":"347:24:3"},{"abstract":false,"baseContracts":[{"baseName":{"id":175,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"394:17:3"},"id":176,"nodeType":"InheritanceSpecifier","src":"394:17:3"},{"baseName":{"id":177,"name":"KeeperCompatibleInterface","nodeType":"IdentifierPath","referencedDeclaration":76,"src":"413:25:3"},"id":178,"nodeType":"InheritanceSpecifier","src":"413:25:3"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":339,"linearizedBaseContracts":[339,76,57],"name":"Raffle","nameLocation":"384:6:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Raffle.RaffleState","id":181,"members":[{"id":179,"name":"OPEN","nameLocation":"487:4:3","nodeType":"EnumValue","src":"487:4:3"},{"id":180,"name":"CALCULATING","nameLocation":"502:11:3","nodeType":"EnumValue","src":"502:11:3"}],"name":"RaffleState","nameLocation":"464:11:3","nodeType":"EnumDefinition","src":"459:61:3"},{"constant":false,"id":184,"mutability":"immutable","name":"i_vrfCoordinatorV2","nameLocation":"691:18:3","nodeType":"VariableDeclaration","scope":339,"src":"647:62:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$165","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":183,"nodeType":"UserDefinedTypeName","pathNode":{"id":182,"name":"VRFCoordinatorV2Interface","nodeType":"IdentifierPath","referencedDeclaration":165,"src":"647:25:3"},"referencedDeclaration":165,"src":"647:25:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$165","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"private"},{"constant":false,"id":186,"mutability":"immutable","name":"i_gasLane","nameLocation":"742:9:3","nodeType":"VariableDeclaration","scope":339,"src":"716:35:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":185,"name":"bytes32","nodeType":"ElementaryTypeName","src":"716:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":188,"mutability":"immutable","name":"i_callbackGasLimit","nameLocation":"783:18:3","nodeType":"VariableDeclaration","scope":339,"src":"758:43:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":187,"name":"uint64","nodeType":"ElementaryTypeName","src":"758:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":false,"id":190,"mutability":"immutable","name":"i_subscriptionId","nameLocation":"833:16:3","nodeType":"VariableDeclaration","scope":339,"src":"808:41:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":189,"name":"uint32","nodeType":"ElementaryTypeName","src":"808:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"private"},{"constant":true,"id":193,"mutability":"constant","name":"REQUEST_CONFIRMATIONS","nameLocation":"872:21:3","nodeType":"VariableDeclaration","scope":339,"src":"856:41:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":191,"name":"uint16","nodeType":"ElementaryTypeName","src":"856:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"896:1:3","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"internal"},{"constant":true,"id":196,"mutability":"constant","name":"NUM_WORDS","nameLocation":"920:9:3","nodeType":"VariableDeclaration","scope":339,"src":"904:29:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":194,"name":"uint16","nodeType":"ElementaryTypeName","src":"904:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"31","id":195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"932:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"anonymous":false,"id":200,"name":"RaffleEntered","nameLocation":"963:13:3","nodeType":"EventDefinition","parameters":{"id":199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":198,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"993:6:3","nodeType":"VariableDeclaration","scope":200,"src":"977:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":197,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"976:24:3"},"src":"957:44:3"},{"constant":false,"id":202,"mutability":"immutable","name":"i_entranceFee","nameLocation":"1140:13:3","nodeType":"VariableDeclaration","scope":339,"src":"1114:39:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":201,"name":"uint256","nodeType":"ElementaryTypeName","src":"1114:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":205,"mutability":"mutable","name":"s_players","nameLocation":"1186:9:3","nodeType":"VariableDeclaration","scope":339,"src":"1160:35:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[]"},"typeName":{"baseType":{"id":203,"name":"address","nodeType":"ElementaryTypeName","src":"1160:15:3","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":204,"nodeType":"ArrayTypeName","src":"1160:17:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"private"},{"constant":false,"id":207,"mutability":"mutable","name":"s_recentWinner","nameLocation":"1218:14:3","nodeType":"VariableDeclaration","scope":339,"src":"1202:30:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":206,"name":"address","nodeType":"ElementaryTypeName","src":"1202:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":210,"mutability":"mutable","name":"s_raffleState","nameLocation":"1259:13:3","nodeType":"VariableDeclaration","scope":339,"src":"1239:33:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$181","typeString":"enum Raffle.RaffleState"},"typeName":{"id":209,"nodeType":"UserDefinedTypeName","pathNode":{"id":208,"name":"RaffleState","nodeType":"IdentifierPath","referencedDeclaration":181,"src":"1239:11:3"},"referencedDeclaration":181,"src":"1239:11:3","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$181","typeString":"enum Raffle.RaffleState"}},"visibility":"private"},{"constant":false,"id":212,"mutability":"mutable","name":"s_lastTimeStamp","nameLocation":"1295:15:3","nodeType":"VariableDeclaration","scope":339,"src":"1279:31:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":211,"name":"uint256","nodeType":"ElementaryTypeName","src":"1279:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":214,"mutability":"immutable","name":"i_interval","nameLocation":"1342:10:3","nodeType":"VariableDeclaration","scope":339,"src":"1317:35:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":213,"name":"uint32","nodeType":"ElementaryTypeName","src":"1317:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"private"},{"body":{"id":268,"nodeType":"Block","src":"1688:362:3","statements":[{"expression":{"id":236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":232,"name":"i_vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"1699:18:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$165","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":234,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"1746:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":233,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"1720:25:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$165_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1720:43:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$165","typeString":"contract VRFCoordinatorV2Interface"}},"src":"1699:64:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$165","typeString":"contract VRFCoordinatorV2Interface"}},"id":237,"nodeType":"ExpressionStatement","src":"1699:64:3"},{"expression":{"id":240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":238,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"1774:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":239,"name":"entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"1790:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1774:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":241,"nodeType":"ExpressionStatement","src":"1774:27:3"},{"expression":{"id":244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":242,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"1812:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":243,"name":"gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"1824:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1812:19:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":245,"nodeType":"ExpressionStatement","src":"1812:19:3"},{"expression":{"id":248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":246,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"1842:16:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":247,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"1861:14:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"1842:33:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":249,"nodeType":"ExpressionStatement","src":"1842:33:3"},{"expression":{"id":252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":250,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":188,"src":"1886:18:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":251,"name":"callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"1907:16:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"1886:37:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":253,"nodeType":"ExpressionStatement","src":"1886:37:3"},{"expression":{"id":256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":254,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"1934:10:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":255,"name":"interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"1947:8:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"1934:21:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":257,"nodeType":"ExpressionStatement","src":"1934:21:3"},{"expression":{"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":258,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"1966:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":259,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1984:5:3","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"1984:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1966:33:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":262,"nodeType":"ExpressionStatement","src":"1966:33:3"},{"expression":{"id":266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":263,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"2010:13:3","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$181","typeString":"enum Raffle.RaffleState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":264,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"2026:11:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$181_$","typeString":"type(enum Raffle.RaffleState)"}},"id":265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":179,"src":"2026:16:3","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$181","typeString":"enum Raffle.RaffleState"}},"src":"2010:32:3","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$181","typeString":"enum Raffle.RaffleState"}},"id":267,"nodeType":"ExpressionStatement","src":"2010:32:3"}]},"id":269,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":229,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"1670:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":230,"kind":"baseConstructorSpecifier","modifierName":{"id":228,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1652:17:3"},"nodeType":"ModifierInvocation","src":"1652:35:3"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":216,"mutability":"mutable","name":"vrfCoordinatorV2","nameLocation":"1480:16:3","nodeType":"VariableDeclaration","scope":269,"src":"1472:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":215,"name":"address","nodeType":"ElementaryTypeName","src":"1472:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":218,"mutability":"mutable","name":"entranceFee","nameLocation":"1515:11:3","nodeType":"VariableDeclaration","scope":269,"src":"1507:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":217,"name":"uint256","nodeType":"ElementaryTypeName","src":"1507:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":220,"mutability":"mutable","name":"gasLane","nameLocation":"1545:7:3","nodeType":"VariableDeclaration","scope":269,"src":"1537:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":219,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1537:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":222,"mutability":"mutable","name":"subscriptionId","nameLocation":"1570:14:3","nodeType":"VariableDeclaration","scope":269,"src":"1563:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":221,"name":"uint32","nodeType":"ElementaryTypeName","src":"1563:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":224,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"1602:16:3","nodeType":"VariableDeclaration","scope":269,"src":"1595:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":223,"name":"uint32","nodeType":"ElementaryTypeName","src":"1595:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":226,"mutability":"mutable","name":"interval","nameLocation":"1636:8:3","nodeType":"VariableDeclaration","scope":269,"src":"1629:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":225,"name":"uint32","nodeType":"ElementaryTypeName","src":"1629:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1461:190:3"},"returnParameters":{"id":231,"nodeType":"ParameterList","parameters":[],"src":"1688:0:3"},"scope":339,"src":"1450:600:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":305,"nodeType":"Block","src":"2096:299:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":272,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2111:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2111:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":274,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"2123:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2111:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":280,"nodeType":"IfStatement","src":"2107:94:3","trueBody":{"id":279,"nodeType":"Block","src":"2138:63:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":276,"name":"Raffle__NotEnoughEthEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"2160:27:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2160:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":278,"nodeType":"RevertStatement","src":"2153:36:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_enum$_RaffleState_$181","typeString":"enum Raffle.RaffleState"},"id":284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":281,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"2215:13:3","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$181","typeString":"enum Raffle.RaffleState"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":282,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"2232:11:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$181_$","typeString":"type(enum Raffle.RaffleState)"}},"id":283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":179,"src":"2232:16:3","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$181","typeString":"enum Raffle.RaffleState"}},"src":"2215:33:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":289,"nodeType":"IfStatement","src":"2211:90:3","trueBody":{"id":288,"nodeType":"Block","src":"2250:51:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":285,"name":"Raffle__NotOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"2272:15:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2272:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":287,"nodeType":"RevertStatement","src":"2265:24:3"}]}},{"expression":{"arguments":[{"arguments":[{"expression":{"id":295,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2334:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2334:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":294,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2326:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":293,"name":"address","nodeType":"ElementaryTypeName","src":"2326:8:3","stateMutability":"payable","typeDescriptions":{}}},"id":297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2326:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":290,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"2311:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"2311:14:3","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$bound_to$_t_array$_t_address_payable_$dyn_storage_ptr_$","typeString":"function (address payable[] storage pointer,address payable)"}},"id":298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2311:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":299,"nodeType":"ExpressionStatement","src":"2311:35:3"},{"eventCall":{"arguments":[{"expression":{"id":301,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2376:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2376:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":300,"name":"RaffleEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"2362:13:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2362:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":304,"nodeType":"EmitStatement","src":"2357:30:3"}]},"functionSelector":"2cfcc539","id":306,"implemented":true,"kind":"function","modifiers":[],"name":"enterRaffle","nameLocation":"2067:11:3","nodeType":"FunctionDefinition","parameters":{"id":270,"nodeType":"ParameterList","parameters":[],"src":"2078:2:3"},"returnParameters":{"id":271,"nodeType":"ParameterList","parameters":[],"src":"2096:0:3"},"scope":339,"src":"2058:337:3","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[69],"body":{"id":320,"nodeType":"Block","src":"2538:47:3","statements":[{"expression":{"components":[{"id":316,"name":"upkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"2557:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"307830","id":317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2571:5:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_77b7d82d931e1a403db0240b08c0716665eec4664af617c457918e4a67bc1810","typeString":"literal_string \"0x0\""},"value":"0x0"}],"id":318,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2556:21:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_stringliteral_77b7d82d931e1a403db0240b08c0716665eec4664af617c457918e4a67bc1810_$","typeString":"tuple(bool,literal_string \"0x0\")"}},"functionReturnParameters":315,"id":319,"nodeType":"Return","src":"2549:28:3"}]},"functionSelector":"6e04ff0d","id":321,"implemented":true,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"2412:11:3","nodeType":"FunctionDefinition","overrides":{"id":310,"nodeType":"OverrideSpecifier","overrides":[],"src":"2475:8:3"},"parameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":308,"mutability":"mutable","name":"checkData","nameLocation":"2449:9:3","nodeType":"VariableDeclaration","scope":321,"src":"2434:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":307,"name":"bytes","nodeType":"ElementaryTypeName","src":"2434:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2423:42:3"},"returnParameters":{"id":315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"2498:12:3","nodeType":"VariableDeclaration","scope":321,"src":"2493:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":311,"name":"bool","nodeType":"ElementaryTypeName","src":"2493:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":314,"mutability":"mutable","name":"performData","nameLocation":"2525:11:3","nodeType":"VariableDeclaration","scope":321,"src":"2512:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":313,"name":"bytes","nodeType":"ElementaryTypeName","src":"2512:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2492:45:3"},"scope":339,"src":"2403:182:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[75],"body":{"id":327,"nodeType":"Block","src":"2666:2:3","statements":[]},"functionSelector":"4585e33b","id":328,"implemented":true,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"2602:13:3","nodeType":"FunctionDefinition","overrides":{"id":325,"nodeType":"OverrideSpecifier","overrides":[],"src":"2657:8:3"},"parameters":{"id":324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":328,"src":"2616:14:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":322,"name":"bytes","nodeType":"ElementaryTypeName","src":"2616:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2615:32:3"},"returnParameters":{"id":326,"nodeType":"ParameterList","parameters":[],"src":"2666:0:3"},"scope":339,"src":"2593:75:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[30],"body":{"id":337,"nodeType":"Block","src":"2800:2:3","statements":[]},"id":338,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"2685:18:3","nodeType":"FunctionDefinition","overrides":{"id":335,"nodeType":"OverrideSpecifier","overrides":[],"src":"2791:8:3"},"parameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":330,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":338,"src":"2714:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":329,"name":"uint256","nodeType":"ElementaryTypeName","src":"2714:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":333,"mutability":"mutable","name":"randomWords","nameLocation":"2763:11:3","nodeType":"VariableDeclaration","scope":338,"src":"2746:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":331,"name":"uint256","nodeType":"ElementaryTypeName","src":"2746:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":332,"nodeType":"ArrayTypeName","src":"2746:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2703:78:3"},"returnParameters":{"id":336,"nodeType":"ParameterList","parameters":[],"src":"2800:0:3"},"scope":339,"src":"2676:126:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":340,"src":"375:2430:3","usedErrors":[8,172,174]}],"src":"35:2772:3"},"id":3}},"contracts":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol":{"KeeperCompatibleInterface":{"abi":[{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}},"performUpkeep(bytes)":{"details":"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.","params":{"performData":"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":\"KeeperCompatibleInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."},"performUpkeep(bytes)":{"notice":"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."}},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"contracts/Raffle.sol":{"Raffle":{"abi":[{"inputs":[{"internalType":"address","name":"vrfCoordinatorV2","type":"address"},{"internalType":"uint256","name":"entranceFee","type":"uint256"},{"internalType":"bytes32","name":"gasLane","type":"bytes32"},{"internalType":"uint32","name":"subscriptionId","type":"uint32"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"interval","type":"uint32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[],"name":"Raffle__NotEnoughEthEntered","type":"error"},{"inputs":[],"name":"Raffle__NotOpen","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"}],"name":"RaffleEntered","type":"event"},{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"enterRaffle","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_21":{"entryPoint":null,"id":21,"parameterSlots":1,"returnSlots":0},"@_269":{"entryPoint":null,"id":269,"parameterSlots":6,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":335,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":358,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":381,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint32_fromMemory":{"entryPoint":404,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint32t_uint32t_uint32_fromMemory":{"entryPoint":427,"id":null,"parameterSlots":2,"returnSlots":6},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":583,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":603,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":613,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":645,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":655,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x21":{"entryPoint":671,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":718,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":723,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":749,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":775,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint32":{"entryPoint":801,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3254:4","statements":[{"body":{"nodeType":"YulBlock","src":"70:80:4","statements":[{"nodeType":"YulAssignment","src":"80:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"89:5:4"},"nodeType":"YulFunctionCall","src":"89:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"80:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"138:5:4"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"111:26:4"},"nodeType":"YulFunctionCall","src":"111:33:4"},"nodeType":"YulExpressionStatement","src":"111:33:4"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"48:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"56:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:4","type":""}],"src":"7:143:4"},{"body":{"nodeType":"YulBlock","src":"219:80:4","statements":[{"nodeType":"YulAssignment","src":"229:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"244:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"238:5:4"},"nodeType":"YulFunctionCall","src":"238:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"229:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"287:5:4"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"260:26:4"},"nodeType":"YulFunctionCall","src":"260:33:4"},"nodeType":"YulExpressionStatement","src":"260:33:4"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"197:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"205:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"213:5:4","type":""}],"src":"156:143:4"},{"body":{"nodeType":"YulBlock","src":"368:80:4","statements":[{"nodeType":"YulAssignment","src":"378:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"393:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"387:5:4"},"nodeType":"YulFunctionCall","src":"387:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"378:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"436:5:4"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"409:26:4"},"nodeType":"YulFunctionCall","src":"409:33:4"},"nodeType":"YulExpressionStatement","src":"409:33:4"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"346:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"354:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"362:5:4","type":""}],"src":"305:143:4"},{"body":{"nodeType":"YulBlock","src":"516:79:4","statements":[{"nodeType":"YulAssignment","src":"526:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"541:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"535:5:4"},"nodeType":"YulFunctionCall","src":"535:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"526:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"583:5:4"}],"functionName":{"name":"validator_revert_t_uint32","nodeType":"YulIdentifier","src":"557:25:4"},"nodeType":"YulFunctionCall","src":"557:32:4"},"nodeType":"YulExpressionStatement","src":"557:32:4"}]},"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"494:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"502:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"510:5:4","type":""}],"src":"454:141:4"},{"body":{"nodeType":"YulBlock","src":"760:969:4","statements":[{"body":{"nodeType":"YulBlock","src":"807:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"809:77:4"},"nodeType":"YulFunctionCall","src":"809:79:4"},"nodeType":"YulExpressionStatement","src":"809:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"781:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"790:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"777:3:4"},"nodeType":"YulFunctionCall","src":"777:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"802:3:4","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"773:3:4"},"nodeType":"YulFunctionCall","src":"773:33:4"},"nodeType":"YulIf","src":"770:120:4"},{"nodeType":"YulBlock","src":"900:128:4","statements":[{"nodeType":"YulVariableDeclaration","src":"915:15:4","value":{"kind":"number","nodeType":"YulLiteral","src":"929:1:4","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"919:6:4","type":""}]},{"nodeType":"YulAssignment","src":"944:74:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"990:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"1001:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"986:3:4"},"nodeType":"YulFunctionCall","src":"986:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1010:7:4"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"954:31:4"},"nodeType":"YulFunctionCall","src":"954:64:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"944:6:4"}]}]},{"nodeType":"YulBlock","src":"1038:129:4","statements":[{"nodeType":"YulVariableDeclaration","src":"1053:16:4","value":{"kind":"number","nodeType":"YulLiteral","src":"1067:2:4","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1057:6:4","type":""}]},{"nodeType":"YulAssignment","src":"1083:74:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1129:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"1140:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1125:3:4"},"nodeType":"YulFunctionCall","src":"1125:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1149:7:4"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1093:31:4"},"nodeType":"YulFunctionCall","src":"1093:64:4"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1083:6:4"}]}]},{"nodeType":"YulBlock","src":"1177:129:4","statements":[{"nodeType":"YulVariableDeclaration","src":"1192:16:4","value":{"kind":"number","nodeType":"YulLiteral","src":"1206:2:4","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1196:6:4","type":""}]},{"nodeType":"YulAssignment","src":"1222:74:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1268:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"1279:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1264:3:4"},"nodeType":"YulFunctionCall","src":"1264:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1288:7:4"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"1232:31:4"},"nodeType":"YulFunctionCall","src":"1232:64:4"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1222:6:4"}]}]},{"nodeType":"YulBlock","src":"1316:128:4","statements":[{"nodeType":"YulVariableDeclaration","src":"1331:16:4","value":{"kind":"number","nodeType":"YulLiteral","src":"1345:2:4","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1335:6:4","type":""}]},{"nodeType":"YulAssignment","src":"1361:73:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1406:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"1417:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1402:3:4"},"nodeType":"YulFunctionCall","src":"1402:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1426:7:4"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"1371:30:4"},"nodeType":"YulFunctionCall","src":"1371:63:4"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1361:6:4"}]}]},{"nodeType":"YulBlock","src":"1454:129:4","statements":[{"nodeType":"YulVariableDeclaration","src":"1469:17:4","value":{"kind":"number","nodeType":"YulLiteral","src":"1483:3:4","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1473:6:4","type":""}]},{"nodeType":"YulAssignment","src":"1500:73:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1545:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"1556:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1541:3:4"},"nodeType":"YulFunctionCall","src":"1541:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1565:7:4"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"1510:30:4"},"nodeType":"YulFunctionCall","src":"1510:63:4"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1500:6:4"}]}]},{"nodeType":"YulBlock","src":"1593:129:4","statements":[{"nodeType":"YulVariableDeclaration","src":"1608:17:4","value":{"kind":"number","nodeType":"YulLiteral","src":"1622:3:4","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1612:6:4","type":""}]},{"nodeType":"YulAssignment","src":"1639:73:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1684:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"1695:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1680:3:4"},"nodeType":"YulFunctionCall","src":"1680:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1704:7:4"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"1649:30:4"},"nodeType":"YulFunctionCall","src":"1649:63:4"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1639:6:4"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint32t_uint32t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"690:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"701:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"713:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"721:6:4","type":""},{"name":"value2","nodeType":"YulTypedName","src":"729:6:4","type":""},{"name":"value3","nodeType":"YulTypedName","src":"737:6:4","type":""},{"name":"value4","nodeType":"YulTypedName","src":"745:6:4","type":""},{"name":"value5","nodeType":"YulTypedName","src":"753:6:4","type":""}],"src":"601:1128:4"},{"body":{"nodeType":"YulBlock","src":"1775:35:4","statements":[{"nodeType":"YulAssignment","src":"1785:19:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1801:2:4","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1795:5:4"},"nodeType":"YulFunctionCall","src":"1795:9:4"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1785:6:4"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1768:6:4","type":""}],"src":"1735:75:4"},{"body":{"nodeType":"YulBlock","src":"1861:51:4","statements":[{"nodeType":"YulAssignment","src":"1871:35:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1900:5:4"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1882:17:4"},"nodeType":"YulFunctionCall","src":"1882:24:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1871:7:4"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1843:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1853:7:4","type":""}],"src":"1816:96:4"},{"body":{"nodeType":"YulBlock","src":"1963:32:4","statements":[{"nodeType":"YulAssignment","src":"1973:16:4","value":{"name":"value","nodeType":"YulIdentifier","src":"1984:5:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1973:7:4"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1945:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1955:7:4","type":""}],"src":"1918:77:4"},{"body":{"nodeType":"YulBlock","src":"2046:81:4","statements":[{"nodeType":"YulAssignment","src":"2056:65:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2071:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"2078:42:4","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2067:3:4"},"nodeType":"YulFunctionCall","src":"2067:54:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2056:7:4"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2028:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2038:7:4","type":""}],"src":"2001:126:4"},{"body":{"nodeType":"YulBlock","src":"2178:32:4","statements":[{"nodeType":"YulAssignment","src":"2188:16:4","value":{"name":"value","nodeType":"YulIdentifier","src":"2199:5:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2188:7:4"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2160:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2170:7:4","type":""}],"src":"2133:77:4"},{"body":{"nodeType":"YulBlock","src":"2260:49:4","statements":[{"nodeType":"YulAssignment","src":"2270:33:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2285:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"2292:10:4","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2281:3:4"},"nodeType":"YulFunctionCall","src":"2281:22:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2270:7:4"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2242:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2252:7:4","type":""}],"src":"2216:93:4"},{"body":{"nodeType":"YulBlock","src":"2343:152:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2360:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2363:77:4","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2353:6:4"},"nodeType":"YulFunctionCall","src":"2353:88:4"},"nodeType":"YulExpressionStatement","src":"2353:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2457:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2460:4:4","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2450:6:4"},"nodeType":"YulFunctionCall","src":"2450:15:4"},"nodeType":"YulExpressionStatement","src":"2450:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2481:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2484:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2474:6:4"},"nodeType":"YulFunctionCall","src":"2474:15:4"},"nodeType":"YulExpressionStatement","src":"2474:15:4"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"2315:180:4"},{"body":{"nodeType":"YulBlock","src":"2590:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2607:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2610:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2600:6:4"},"nodeType":"YulFunctionCall","src":"2600:12:4"},"nodeType":"YulExpressionStatement","src":"2600:12:4"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"2501:117:4"},{"body":{"nodeType":"YulBlock","src":"2713:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2730:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2733:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2723:6:4"},"nodeType":"YulFunctionCall","src":"2723:12:4"},"nodeType":"YulExpressionStatement","src":"2723:12:4"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"2624:117:4"},{"body":{"nodeType":"YulBlock","src":"2790:79:4","statements":[{"body":{"nodeType":"YulBlock","src":"2847:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2856:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2859:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2849:6:4"},"nodeType":"YulFunctionCall","src":"2849:12:4"},"nodeType":"YulExpressionStatement","src":"2849:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2813:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2838:5:4"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2820:17:4"},"nodeType":"YulFunctionCall","src":"2820:24:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2810:2:4"},"nodeType":"YulFunctionCall","src":"2810:35:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2803:6:4"},"nodeType":"YulFunctionCall","src":"2803:43:4"},"nodeType":"YulIf","src":"2800:63:4"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2783:5:4","type":""}],"src":"2747:122:4"},{"body":{"nodeType":"YulBlock","src":"2918:79:4","statements":[{"body":{"nodeType":"YulBlock","src":"2975:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2984:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2987:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2977:6:4"},"nodeType":"YulFunctionCall","src":"2977:12:4"},"nodeType":"YulExpressionStatement","src":"2977:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2941:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2966:5:4"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"2948:17:4"},"nodeType":"YulFunctionCall","src":"2948:24:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2938:2:4"},"nodeType":"YulFunctionCall","src":"2938:35:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2931:6:4"},"nodeType":"YulFunctionCall","src":"2931:43:4"},"nodeType":"YulIf","src":"2928:63:4"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2911:5:4","type":""}],"src":"2875:122:4"},{"body":{"nodeType":"YulBlock","src":"3046:79:4","statements":[{"body":{"nodeType":"YulBlock","src":"3103:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3112:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3115:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3105:6:4"},"nodeType":"YulFunctionCall","src":"3105:12:4"},"nodeType":"YulExpressionStatement","src":"3105:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3069:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3094:5:4"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3076:17:4"},"nodeType":"YulFunctionCall","src":"3076:24:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3066:2:4"},"nodeType":"YulFunctionCall","src":"3066:35:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3059:6:4"},"nodeType":"YulFunctionCall","src":"3059:43:4"},"nodeType":"YulIf","src":"3056:63:4"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3039:5:4","type":""}],"src":"3003:122:4"},{"body":{"nodeType":"YulBlock","src":"3173:78:4","statements":[{"body":{"nodeType":"YulBlock","src":"3229:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3238:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3241:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3231:6:4"},"nodeType":"YulFunctionCall","src":"3231:12:4"},"nodeType":"YulExpressionStatement","src":"3231:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3196:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3220:5:4"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"3203:16:4"},"nodeType":"YulFunctionCall","src":"3203:23:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3193:2:4"},"nodeType":"YulFunctionCall","src":"3193:34:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3186:6:4"},"nodeType":"YulFunctionCall","src":"3186:42:4"},"nodeType":"YulIf","src":"3183:62:4"}]},"name":"validator_revert_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3166:5:4","type":""}],"src":"3131:120:4"}]},"contents":"{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_bytes32t_uint32t_uint32t_uint32_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_uint32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n}\n","id":4,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101606040523480156200001257600080fd5b5060405162000b4738038062000b478339818101604052810190620000389190620001ab565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508461012081815250508360c081815250508263ffffffff166101008163ffffffff1660e01b815250508163ffffffff1667ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508063ffffffff166101408163ffffffff1660e01b81525050426002819055506000600160146101000a81548160ff021916908360018111156200013e576200013d6200029f565b5b02179055505050505050506200033b565b6000815190506200016081620002d3565b92915050565b6000815190506200017781620002ed565b92915050565b6000815190506200018e8162000307565b92915050565b600081519050620001a58162000321565b92915050565b60008060008060008060c08789031215620001cb57620001ca620002ce565b5b6000620001db89828a016200014f565b9650506020620001ee89828a016200017d565b95505060406200020189828a0162000166565b94505060606200021489828a0162000194565b93505060806200022789828a0162000194565b92505060a06200023a89828a0162000194565b9150509295509295509295565b6000620002548262000265565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002de8162000247565b8114620002ea57600080fd5b50565b620002f8816200025b565b81146200030457600080fd5b50565b620003128162000285565b81146200031e57600080fd5b50565b6200032c816200028f565b81146200033857600080fd5b50565b60805160601c60a05160601c60c05160e05160c01c6101005160e01c610120516101405160e01c6107ab6200039c6000396000505060006101a00152600050506000505060005050600050506000818160e0015261013401526107ab6000f3fe60806040526004361061003f5760003560e01c80631fe543e3146100445780632cfcc5391461006d5780634585e33b146100775780636e04ff0d146100a0575b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906104b1565b6100de565b005b61007561019e565b005b34801561008357600080fd5b5061009e60048036038101906100999190610464565b61030d565b005b3480156100ac57600080fd5b506100c760048036038101906100c29190610464565b610311565b6040516100d592919061058d565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461019057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610187929190610564565b60405180910390fd5b61019a8282610357565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156101f8576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561020c5761020b6106d6565b5b600160149054906101000a900460ff16600181111561022e5761022d6106d6565b5b14610265576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f634f3211e3a4e43fee5a21ad9f87ca153b300fc78b1c557a2057dbe9c63bcb4760405160405180910390a2565b5050565b60006060816040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250915091509250929050565b5050565b600061036e610369846105e2565b6105bd565b905080838252602082019050828560208602820111156103915761039061073e565b5b60005b858110156103c157816103a7888261044f565b845260208401935060208301925050600181019050610394565b5050509392505050565b600082601f8301126103e0576103df610739565b5b81356103f084826020860161035b565b91505092915050565b60008083601f84011261040f5761040e610739565b5b8235905067ffffffffffffffff81111561042c5761042b610734565b5b6020830191508360018202830111156104485761044761073e565b5b9250929050565b60008135905061045e8161075e565b92915050565b6000806020838503121561047b5761047a610748565b5b600083013567ffffffffffffffff81111561049957610498610743565b5b6104a5858286016103f9565b92509250509250929050565b600080604083850312156104c8576104c7610748565b5b60006104d68582860161044f565b925050602083013567ffffffffffffffff8111156104f7576104f6610743565b5b610503858286016103cb565b9150509250929050565b6105168161062a565b82525050565b6105258161063c565b82525050565b60006105368261060e565b6105408185610619565b9350610550818560208601610672565b6105598161074d565b840191505092915050565b6000604082019050610579600083018561050d565b610586602083018461050d565b9392505050565b60006040820190506105a2600083018561051c565b81810360208301526105b4818461052b565b90509392505050565b60006105c76105d8565b90506105d382826106a5565b919050565b6000604051905090565b600067ffffffffffffffff8211156105fd576105fc610705565b5b602082029050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061063582610648565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610690578082015181840152602081019050610675565b8381111561069f576000848401525b50505050565b6106ae8261074d565b810181811067ffffffffffffffff821117156106cd576106cc610705565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61076781610668565b811461077257600080fd5b5056fea2646970667358221220fe5dc2f5bc83667e71f723b83873cda6c1cdf093b9d30440e7529de038ad932364736f6c63430008070033","opcodes":"PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xB47 CODESIZE SUB DUP1 PUSH3 0xB47 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x38 SWAP2 SWAP1 PUSH3 0x1AB JUMP JUMPDEST DUP6 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP DUP5 PUSH2 0x120 DUP2 DUP2 MSTORE POP POP DUP4 PUSH1 0xC0 DUP2 DUP2 MSTORE POP POP DUP3 PUSH4 0xFFFFFFFF AND PUSH2 0x100 DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE POP POP DUP2 PUSH4 0xFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 SHL DUP2 MSTORE POP POP DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x140 DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE POP POP TIMESTAMP PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH3 0x13E JUMPI PUSH3 0x13D PUSH3 0x29F JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP PUSH3 0x33B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x160 DUP2 PUSH3 0x2D3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x177 DUP2 PUSH3 0x2ED JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x18E DUP2 PUSH3 0x307 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1A5 DUP2 PUSH3 0x321 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x1CB JUMPI PUSH3 0x1CA PUSH3 0x2CE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1DB DUP10 DUP3 DUP11 ADD PUSH3 0x14F JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH3 0x1EE DUP10 DUP3 DUP11 ADD PUSH3 0x17D JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH3 0x201 DUP10 DUP3 DUP11 ADD PUSH3 0x166 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH3 0x214 DUP10 DUP3 DUP11 ADD PUSH3 0x194 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH3 0x227 DUP10 DUP3 DUP11 ADD PUSH3 0x194 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH3 0x23A DUP10 DUP3 DUP11 ADD PUSH3 0x194 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x254 DUP3 PUSH3 0x265 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2DE DUP2 PUSH3 0x247 JUMP JUMPDEST DUP2 EQ PUSH3 0x2EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x2F8 DUP2 PUSH3 0x25B JUMP JUMPDEST DUP2 EQ PUSH3 0x304 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x312 DUP2 PUSH3 0x285 JUMP JUMPDEST DUP2 EQ PUSH3 0x31E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x32C DUP2 PUSH3 0x28F JUMP JUMPDEST DUP2 EQ PUSH3 0x338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH1 0xC0 SHR PUSH2 0x100 MLOAD PUSH1 0xE0 SHR PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH1 0xE0 SHR PUSH2 0x7AB PUSH3 0x39C PUSH1 0x0 CODECOPY PUSH1 0x0 POP POP PUSH1 0x0 PUSH2 0x1A0 ADD MSTORE PUSH1 0x0 POP POP PUSH1 0x0 POP POP PUSH1 0x0 POP POP PUSH1 0x0 POP POP PUSH1 0x0 DUP2 DUP2 PUSH1 0xE0 ADD MSTORE PUSH2 0x134 ADD MSTORE PUSH2 0x7AB PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x2CFCC539 EQ PUSH2 0x6D JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0xA0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x4B1 JUMP JUMPDEST PUSH2 0xDE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x75 PUSH2 0x19E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x99 SWAP2 SWAP1 PUSH2 0x464 JUMP JUMPDEST PUSH2 0x30D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0x464 JUMP JUMPDEST PUSH2 0x311 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD5 SWAP3 SWAP2 SWAP1 PUSH2 0x58D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x190 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x187 SWAP3 SWAP2 SWAP1 PUSH2 0x564 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x19A DUP3 DUP3 PUSH2 0x357 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x1F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x66D781F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x20C JUMPI PUSH2 0x20B PUSH2 0x6D6 JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x22E JUMPI PUSH2 0x22D PUSH2 0x6D6 JUMP JUMPDEST JUMPDEST EQ PUSH2 0x265 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1425571C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x634F3211E3A4E43FEE5A21AD9F87CA153B300FC78B1C557A2057DBE9C63BCB47 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3078300000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36E PUSH2 0x369 DUP5 PUSH2 0x5E2 JUMP JUMPDEST PUSH2 0x5BD JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x391 JUMPI PUSH2 0x390 PUSH2 0x73E JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3C1 JUMPI DUP2 PUSH2 0x3A7 DUP9 DUP3 PUSH2 0x44F JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x394 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3E0 JUMPI PUSH2 0x3DF PUSH2 0x739 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3F0 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x35B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x40F JUMPI PUSH2 0x40E PUSH2 0x739 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x42C JUMPI PUSH2 0x42B PUSH2 0x734 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x448 JUMPI PUSH2 0x447 PUSH2 0x73E JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x45E DUP2 PUSH2 0x75E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x47B JUMPI PUSH2 0x47A PUSH2 0x748 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x499 JUMPI PUSH2 0x498 PUSH2 0x743 JUMP JUMPDEST JUMPDEST PUSH2 0x4A5 DUP6 DUP3 DUP7 ADD PUSH2 0x3F9 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4C8 JUMPI PUSH2 0x4C7 PUSH2 0x748 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4D6 DUP6 DUP3 DUP7 ADD PUSH2 0x44F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4F7 JUMPI PUSH2 0x4F6 PUSH2 0x743 JUMP JUMPDEST JUMPDEST PUSH2 0x503 DUP6 DUP3 DUP7 ADD PUSH2 0x3CB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x516 DUP2 PUSH2 0x62A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x525 DUP2 PUSH2 0x63C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x536 DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH2 0x540 DUP2 DUP6 PUSH2 0x619 JUMP JUMPDEST SWAP4 POP PUSH2 0x550 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x672 JUMP JUMPDEST PUSH2 0x559 DUP2 PUSH2 0x74D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x579 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x50D JUMP JUMPDEST PUSH2 0x586 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x50D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x5A2 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x51C JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x5B4 DUP2 DUP5 PUSH2 0x52B JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5C7 PUSH2 0x5D8 JUMP JUMPDEST SWAP1 POP PUSH2 0x5D3 DUP3 DUP3 PUSH2 0x6A5 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x5FD JUMPI PUSH2 0x5FC PUSH2 0x705 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x635 DUP3 PUSH2 0x648 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x690 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x675 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x69F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP3 PUSH2 0x74D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x6CD JUMPI PUSH2 0x6CC PUSH2 0x705 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x767 DUP2 PUSH2 0x668 JUMP JUMPDEST DUP2 EQ PUSH2 0x772 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID 0x5D 0xC2 CREATE2 0xBC DUP4 PUSH7 0x7E71F723B83873 0xCD 0xA6 0xC1 0xCD CREATE SWAP4 0xB9 0xD3 DIV BLOCKHASH 0xE7 MSTORE SWAP14 0xE0 CODESIZE 0xAD SWAP4 0x23 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"375:2430:3:-:0;;;1450:600;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1670:16;5616:15:0;5599:32;;;;;;;;;;;;5556:80;1746:16:3::1;1699:64;;;;;;;;;;::::0;::::1;1790:11;1774:27;;;;::::0;::::1;1824:7;1812:19;;;;::::0;::::1;1861:14;1842:33;;;;;;;;;;::::0;::::1;1907:16;1886:37;;;;;;;;;;;;::::0;::::1;1947:8;1934:21;;;;;;;;;;::::0;::::1;1984:15;1966;:33;;;;2026:16;2010:13;;:32;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;1450:600:::0;;;;;;375:2430;;7:143:4;64:5;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;7:143;;;;:::o;156:::-;213:5;244:6;238:13;229:22;;260:33;287:5;260:33;:::i;:::-;156:143;;;;:::o;305:::-;362:5;393:6;387:13;378:22;;409:33;436:5;409:33;:::i;:::-;305:143;;;;:::o;454:141::-;510:5;541:6;535:13;526:22;;557:32;583:5;557:32;:::i;:::-;454:141;;;;:::o;601:1128::-;713:6;721;729;737;745;753;802:3;790:9;781:7;777:23;773:33;770:120;;;809:79;;:::i;:::-;770:120;929:1;954:64;1010:7;1001:6;990:9;986:22;954:64;:::i;:::-;944:74;;900:128;1067:2;1093:64;1149:7;1140:6;1129:9;1125:22;1093:64;:::i;:::-;1083:74;;1038:129;1206:2;1232:64;1288:7;1279:6;1268:9;1264:22;1232:64;:::i;:::-;1222:74;;1177:129;1345:2;1371:63;1426:7;1417:6;1406:9;1402:22;1371:63;:::i;:::-;1361:73;;1316:128;1483:3;1510:63;1565:7;1556:6;1545:9;1541:22;1510:63;:::i;:::-;1500:73;;1454:129;1622:3;1649:63;1704:7;1695:6;1684:9;1680:22;1649:63;:::i;:::-;1639:73;;1593:129;601:1128;;;;;;;;:::o;1816:96::-;1853:7;1882:24;1900:5;1882:24;:::i;:::-;1871:35;;1816:96;;;:::o;1918:77::-;1955:7;1984:5;1973:16;;1918:77;;;:::o;2001:126::-;2038:7;2078:42;2071:5;2067:54;2056:65;;2001:126;;;:::o;2133:77::-;2170:7;2199:5;2188:16;;2133:77;;;:::o;2216:93::-;2252:7;2292:10;2285:5;2281:22;2270:33;;2216:93;;;:::o;2315:180::-;2363:77;2360:1;2353:88;2460:4;2457:1;2450:15;2484:4;2481:1;2474:15;2624:117;2733:1;2730;2723:12;2747:122;2820:24;2838:5;2820:24;:::i;:::-;2813:5;2810:35;2800:63;;2859:1;2856;2849:12;2800:63;2747:122;:::o;2875:::-;2948:24;2966:5;2948:24;:::i;:::-;2941:5;2938:35;2928:63;;2987:1;2984;2977:12;2928:63;2875:122;:::o;3003:::-;3076:24;3094:5;3076:24;:::i;:::-;3069:5;3066:35;3056:63;;3115:1;3112;3105:12;3056:63;3003:122;:::o;3131:120::-;3203:23;3220:5;3203:23;:::i;:::-;3196:5;3193:34;3183:62;;3241:1;3238;3231:12;3183:62;3131:120;:::o;375:2430:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@checkUpkeep_321":{"entryPoint":785,"id":321,"parameterSlots":2,"returnSlots":2},"@enterRaffle_306":{"entryPoint":414,"id":306,"parameterSlots":0,"returnSlots":0},"@fulfillRandomWords_338":{"entryPoint":855,"id":338,"parameterSlots":2,"returnSlots":0},"@performUpkeep_328":{"entryPoint":781,"id":328,"parameterSlots":2,"returnSlots":0},"@rawFulfillRandomWords_56":{"entryPoint":222,"id":56,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":859,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":971,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":1017,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_uint256":{"entryPoint":1103,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":1124,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":1201,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1293,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":1308,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":1323,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":1380,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":1421,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_memory":{"entryPoint":1469,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":1496,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":1506,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":1550,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":1561,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":1578,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":1596,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1608,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1640,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":1650,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":1701,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x21":{"entryPoint":1750,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1797,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":1844,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":1849,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":1854,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":1859,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1864,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":1869,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_uint256":{"entryPoint":1886,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:7484:4","statements":[{"body":{"nodeType":"YulBlock","src":"126:620:4","statements":[{"nodeType":"YulAssignment","src":"136:90:4","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"218:6:4"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"161:56:4"},"nodeType":"YulFunctionCall","src":"161:64:4"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"145:15:4"},"nodeType":"YulFunctionCall","src":"145:81:4"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"136:5:4"}]},{"nodeType":"YulVariableDeclaration","src":"235:16:4","value":{"name":"array","nodeType":"YulIdentifier","src":"246:5:4"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"239:3:4","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"268:5:4"},{"name":"length","nodeType":"YulIdentifier","src":"275:6:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"261:6:4"},"nodeType":"YulFunctionCall","src":"261:21:4"},"nodeType":"YulExpressionStatement","src":"261:21:4"},{"nodeType":"YulAssignment","src":"291:23:4","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"302:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"309:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"298:3:4"},"nodeType":"YulFunctionCall","src":"298:16:4"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"291:3:4"}]},{"nodeType":"YulVariableDeclaration","src":"324:17:4","value":{"name":"offset","nodeType":"YulIdentifier","src":"335:6:4"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"328:3:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"390:103:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"404:77:4"},"nodeType":"YulFunctionCall","src":"404:79:4"},"nodeType":"YulExpressionStatement","src":"404:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"360:3:4"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"369:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"377:4:4","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"365:3:4"},"nodeType":"YulFunctionCall","src":"365:17:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"356:3:4"},"nodeType":"YulFunctionCall","src":"356:27:4"},{"name":"end","nodeType":"YulIdentifier","src":"385:3:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"353:2:4"},"nodeType":"YulFunctionCall","src":"353:36:4"},"nodeType":"YulIf","src":"350:143:4"},{"body":{"nodeType":"YulBlock","src":"562:178:4","statements":[{"nodeType":"YulVariableDeclaration","src":"577:21:4","value":{"name":"src","nodeType":"YulIdentifier","src":"595:3:4"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"581:10:4","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"619:3:4"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"645:10:4"},{"name":"end","nodeType":"YulIdentifier","src":"657:3:4"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"624:20:4"},"nodeType":"YulFunctionCall","src":"624:37:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"612:6:4"},"nodeType":"YulFunctionCall","src":"612:50:4"},"nodeType":"YulExpressionStatement","src":"612:50:4"},{"nodeType":"YulAssignment","src":"675:21:4","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"686:3:4"},{"kind":"number","nodeType":"YulLiteral","src":"691:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"682:3:4"},"nodeType":"YulFunctionCall","src":"682:14:4"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"675:3:4"}]},{"nodeType":"YulAssignment","src":"709:21:4","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"720:3:4"},{"kind":"number","nodeType":"YulLiteral","src":"725:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:4"},"nodeType":"YulFunctionCall","src":"716:14:4"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"709:3:4"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"524:1:4"},{"name":"length","nodeType":"YulIdentifier","src":"527:6:4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"521:2:4"},"nodeType":"YulFunctionCall","src":"521:13:4"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"535:18:4","statements":[{"nodeType":"YulAssignment","src":"537:14:4","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"546:1:4"},{"kind":"number","nodeType":"YulLiteral","src":"549:1:4","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"542:3:4"},"nodeType":"YulFunctionCall","src":"542:9:4"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"537:1:4"}]}]},"pre":{"nodeType":"YulBlock","src":"506:14:4","statements":[{"nodeType":"YulVariableDeclaration","src":"508:10:4","value":{"kind":"number","nodeType":"YulLiteral","src":"517:1:4","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"512:1:4","type":""}]}]},"src":"502:238:4"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"96:6:4","type":""},{"name":"length","nodeType":"YulTypedName","src":"104:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"112:3:4","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"120:5:4","type":""}],"src":"24:722:4"},{"body":{"nodeType":"YulBlock","src":"846:293:4","statements":[{"body":{"nodeType":"YulBlock","src":"895:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"897:77:4"},"nodeType":"YulFunctionCall","src":"897:79:4"},"nodeType":"YulExpressionStatement","src":"897:79:4"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"874:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"882:4:4","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"870:3:4"},"nodeType":"YulFunctionCall","src":"870:17:4"},{"name":"end","nodeType":"YulIdentifier","src":"889:3:4"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"866:3:4"},"nodeType":"YulFunctionCall","src":"866:27:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"859:6:4"},"nodeType":"YulFunctionCall","src":"859:35:4"},"nodeType":"YulIf","src":"856:122:4"},{"nodeType":"YulVariableDeclaration","src":"987:34:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1014:6:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1001:12:4"},"nodeType":"YulFunctionCall","src":"1001:20:4"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"991:6:4","type":""}]},{"nodeType":"YulAssignment","src":"1030:103:4","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1106:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"1114:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1102:3:4"},"nodeType":"YulFunctionCall","src":"1102:17:4"},{"name":"length","nodeType":"YulIdentifier","src":"1121:6:4"},{"name":"end","nodeType":"YulIdentifier","src":"1129:3:4"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"1039:62:4"},"nodeType":"YulFunctionCall","src":"1039:94:4"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1030:5:4"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"824:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"832:3:4","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"840:5:4","type":""}],"src":"769:370:4"},{"body":{"nodeType":"YulBlock","src":"1232:478:4","statements":[{"body":{"nodeType":"YulBlock","src":"1281:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"1283:77:4"},"nodeType":"YulFunctionCall","src":"1283:79:4"},"nodeType":"YulExpressionStatement","src":"1283:79:4"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1260:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"1268:4:4","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1256:3:4"},"nodeType":"YulFunctionCall","src":"1256:17:4"},{"name":"end","nodeType":"YulIdentifier","src":"1275:3:4"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1252:3:4"},"nodeType":"YulFunctionCall","src":"1252:27:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1245:6:4"},"nodeType":"YulFunctionCall","src":"1245:35:4"},"nodeType":"YulIf","src":"1242:122:4"},{"nodeType":"YulAssignment","src":"1373:30:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1396:6:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1383:12:4"},"nodeType":"YulFunctionCall","src":"1383:20:4"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1373:6:4"}]},{"body":{"nodeType":"YulBlock","src":"1446:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"1448:77:4"},"nodeType":"YulFunctionCall","src":"1448:79:4"},"nodeType":"YulExpressionStatement","src":"1448:79:4"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1418:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"1426:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1415:2:4"},"nodeType":"YulFunctionCall","src":"1415:30:4"},"nodeType":"YulIf","src":"1412:117:4"},{"nodeType":"YulAssignment","src":"1538:29:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1554:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"1562:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1550:3:4"},"nodeType":"YulFunctionCall","src":"1550:17:4"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"1538:8:4"}]},{"body":{"nodeType":"YulBlock","src":"1621:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"1623:77:4"},"nodeType":"YulFunctionCall","src":"1623:79:4"},"nodeType":"YulExpressionStatement","src":"1623:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"1586:8:4"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1600:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"1608:4:4","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1596:3:4"},"nodeType":"YulFunctionCall","src":"1596:17:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1582:3:4"},"nodeType":"YulFunctionCall","src":"1582:32:4"},{"name":"end","nodeType":"YulIdentifier","src":"1616:3:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1579:2:4"},"nodeType":"YulFunctionCall","src":"1579:41:4"},"nodeType":"YulIf","src":"1576:128:4"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1199:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"1207:3:4","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"1215:8:4","type":""},{"name":"length","nodeType":"YulTypedName","src":"1225:6:4","type":""}],"src":"1158:552:4"},{"body":{"nodeType":"YulBlock","src":"1768:87:4","statements":[{"nodeType":"YulAssignment","src":"1778:29:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1800:6:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1787:12:4"},"nodeType":"YulFunctionCall","src":"1787:20:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1778:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1843:5:4"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1816:26:4"},"nodeType":"YulFunctionCall","src":"1816:33:4"},"nodeType":"YulExpressionStatement","src":"1816:33:4"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1746:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"1754:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1762:5:4","type":""}],"src":"1716:139:4"},{"body":{"nodeType":"YulBlock","src":"1946:442:4","statements":[{"body":{"nodeType":"YulBlock","src":"1992:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1994:77:4"},"nodeType":"YulFunctionCall","src":"1994:79:4"},"nodeType":"YulExpressionStatement","src":"1994:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1967:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"1976:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1963:3:4"},"nodeType":"YulFunctionCall","src":"1963:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"1988:2:4","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1959:3:4"},"nodeType":"YulFunctionCall","src":"1959:32:4"},"nodeType":"YulIf","src":"1956:119:4"},{"nodeType":"YulBlock","src":"2085:296:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2100:45:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2131:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"2142:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2127:3:4"},"nodeType":"YulFunctionCall","src":"2127:17:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2114:12:4"},"nodeType":"YulFunctionCall","src":"2114:31:4"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2104:6:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"2192:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"2194:77:4"},"nodeType":"YulFunctionCall","src":"2194:79:4"},"nodeType":"YulExpressionStatement","src":"2194:79:4"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2164:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"2172:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2161:2:4"},"nodeType":"YulFunctionCall","src":"2161:30:4"},"nodeType":"YulIf","src":"2158:117:4"},{"nodeType":"YulAssignment","src":"2289:82:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2343:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"2354:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2339:3:4"},"nodeType":"YulFunctionCall","src":"2339:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2363:7:4"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"2307:31:4"},"nodeType":"YulFunctionCall","src":"2307:64:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2289:6:4"},{"name":"value1","nodeType":"YulIdentifier","src":"2297:6:4"}]}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1908:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1919:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1931:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1939:6:4","type":""}],"src":"1861:527:4"},{"body":{"nodeType":"YulBlock","src":"2502:576:4","statements":[{"body":{"nodeType":"YulBlock","src":"2548:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2550:77:4"},"nodeType":"YulFunctionCall","src":"2550:79:4"},"nodeType":"YulExpressionStatement","src":"2550:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2523:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"2532:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2519:3:4"},"nodeType":"YulFunctionCall","src":"2519:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"2544:2:4","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2515:3:4"},"nodeType":"YulFunctionCall","src":"2515:32:4"},"nodeType":"YulIf","src":"2512:119:4"},{"nodeType":"YulBlock","src":"2641:117:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2656:15:4","value":{"kind":"number","nodeType":"YulLiteral","src":"2670:1:4","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2660:6:4","type":""}]},{"nodeType":"YulAssignment","src":"2685:63:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2720:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"2731:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2716:3:4"},"nodeType":"YulFunctionCall","src":"2716:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2740:7:4"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2695:20:4"},"nodeType":"YulFunctionCall","src":"2695:53:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2685:6:4"}]}]},{"nodeType":"YulBlock","src":"2768:303:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2783:46:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2814:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"2825:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2810:3:4"},"nodeType":"YulFunctionCall","src":"2810:18:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2797:12:4"},"nodeType":"YulFunctionCall","src":"2797:32:4"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2787:6:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"2876:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"2878:77:4"},"nodeType":"YulFunctionCall","src":"2878:79:4"},"nodeType":"YulExpressionStatement","src":"2878:79:4"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2848:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"2856:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2845:2:4"},"nodeType":"YulFunctionCall","src":"2845:30:4"},"nodeType":"YulIf","src":"2842:117:4"},{"nodeType":"YulAssignment","src":"2973:88:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3033:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"3044:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3029:3:4"},"nodeType":"YulFunctionCall","src":"3029:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3053:7:4"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2983:45:4"},"nodeType":"YulFunctionCall","src":"2983:78:4"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2973:6:4"}]}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2464:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2475:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2487:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2495:6:4","type":""}],"src":"2394:684:4"},{"body":{"nodeType":"YulBlock","src":"3149:53:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3166:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3189:5:4"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3171:17:4"},"nodeType":"YulFunctionCall","src":"3171:24:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3159:6:4"},"nodeType":"YulFunctionCall","src":"3159:37:4"},"nodeType":"YulExpressionStatement","src":"3159:37:4"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3137:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3144:3:4","type":""}],"src":"3084:118:4"},{"body":{"nodeType":"YulBlock","src":"3267:50:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3284:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3304:5:4"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"3289:14:4"},"nodeType":"YulFunctionCall","src":"3289:21:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3277:6:4"},"nodeType":"YulFunctionCall","src":"3277:34:4"},"nodeType":"YulExpressionStatement","src":"3277:34:4"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3255:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3262:3:4","type":""}],"src":"3208:109:4"},{"body":{"nodeType":"YulBlock","src":"3413:270:4","statements":[{"nodeType":"YulVariableDeclaration","src":"3423:52:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3469:5:4"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"3437:31:4"},"nodeType":"YulFunctionCall","src":"3437:38:4"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3427:6:4","type":""}]},{"nodeType":"YulAssignment","src":"3484:77:4","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3549:3:4"},{"name":"length","nodeType":"YulIdentifier","src":"3554:6:4"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3491:57:4"},"nodeType":"YulFunctionCall","src":"3491:70:4"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3484:3:4"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3596:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"3603:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3592:3:4"},"nodeType":"YulFunctionCall","src":"3592:16:4"},{"name":"pos","nodeType":"YulIdentifier","src":"3610:3:4"},{"name":"length","nodeType":"YulIdentifier","src":"3615:6:4"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"3570:21:4"},"nodeType":"YulFunctionCall","src":"3570:52:4"},"nodeType":"YulExpressionStatement","src":"3570:52:4"},{"nodeType":"YulAssignment","src":"3631:46:4","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3642:3:4"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3669:6:4"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"3647:21:4"},"nodeType":"YulFunctionCall","src":"3647:29:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3638:3:4"},"nodeType":"YulFunctionCall","src":"3638:39:4"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3631:3:4"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3394:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3401:3:4","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3409:3:4","type":""}],"src":"3323:360:4"},{"body":{"nodeType":"YulBlock","src":"3815:206:4","statements":[{"nodeType":"YulAssignment","src":"3825:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3837:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"3848:2:4","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3833:3:4"},"nodeType":"YulFunctionCall","src":"3833:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3825:4:4"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3905:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3918:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"3929:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3914:3:4"},"nodeType":"YulFunctionCall","src":"3914:17:4"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"3861:43:4"},"nodeType":"YulFunctionCall","src":"3861:71:4"},"nodeType":"YulExpressionStatement","src":"3861:71:4"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3986:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3999:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"4010:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3995:3:4"},"nodeType":"YulFunctionCall","src":"3995:18:4"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"3942:43:4"},"nodeType":"YulFunctionCall","src":"3942:72:4"},"nodeType":"YulExpressionStatement","src":"3942:72:4"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3779:9:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3791:6:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3799:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3810:4:4","type":""}],"src":"3689:332:4"},{"body":{"nodeType":"YulBlock","src":"4165:269:4","statements":[{"nodeType":"YulAssignment","src":"4175:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4187:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"4198:2:4","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4183:3:4"},"nodeType":"YulFunctionCall","src":"4183:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4175:4:4"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4249:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4262:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"4273:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4258:3:4"},"nodeType":"YulFunctionCall","src":"4258:17:4"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"4211:37:4"},"nodeType":"YulFunctionCall","src":"4211:65:4"},"nodeType":"YulExpressionStatement","src":"4211:65:4"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4297:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"4308:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4293:3:4"},"nodeType":"YulFunctionCall","src":"4293:18:4"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4317:4:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"4323:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4313:3:4"},"nodeType":"YulFunctionCall","src":"4313:20:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4286:6:4"},"nodeType":"YulFunctionCall","src":"4286:48:4"},"nodeType":"YulExpressionStatement","src":"4286:48:4"},{"nodeType":"YulAssignment","src":"4343:84:4","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4413:6:4"},{"name":"tail","nodeType":"YulIdentifier","src":"4422:4:4"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4351:61:4"},"nodeType":"YulFunctionCall","src":"4351:76:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4343:4:4"}]}]},"name":"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4129:9:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4141:6:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4149:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4160:4:4","type":""}],"src":"4027:407:4"},{"body":{"nodeType":"YulBlock","src":"4481:88:4","statements":[{"nodeType":"YulAssignment","src":"4491:30:4","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"4501:18:4"},"nodeType":"YulFunctionCall","src":"4501:20:4"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4491:6:4"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4550:6:4"},{"name":"size","nodeType":"YulIdentifier","src":"4558:4:4"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"4530:19:4"},"nodeType":"YulFunctionCall","src":"4530:33:4"},"nodeType":"YulExpressionStatement","src":"4530:33:4"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"4465:4:4","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4474:6:4","type":""}],"src":"4440:129:4"},{"body":{"nodeType":"YulBlock","src":"4615:35:4","statements":[{"nodeType":"YulAssignment","src":"4625:19:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4641:2:4","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4635:5:4"},"nodeType":"YulFunctionCall","src":"4635:9:4"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4625:6:4"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4608:6:4","type":""}],"src":"4575:75:4"},{"body":{"nodeType":"YulBlock","src":"4738:229:4","statements":[{"body":{"nodeType":"YulBlock","src":"4843:22:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4845:16:4"},"nodeType":"YulFunctionCall","src":"4845:18:4"},"nodeType":"YulExpressionStatement","src":"4845:18:4"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4815:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"4823:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4812:2:4"},"nodeType":"YulFunctionCall","src":"4812:30:4"},"nodeType":"YulIf","src":"4809:56:4"},{"nodeType":"YulAssignment","src":"4875:25:4","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4887:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"4895:4:4","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4883:3:4"},"nodeType":"YulFunctionCall","src":"4883:17:4"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"4875:4:4"}]},{"nodeType":"YulAssignment","src":"4937:23:4","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"4949:4:4"},{"kind":"number","nodeType":"YulLiteral","src":"4955:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4945:3:4"},"nodeType":"YulFunctionCall","src":"4945:15:4"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"4937:4:4"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"4722:6:4","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"4733:4:4","type":""}],"src":"4656:311:4"},{"body":{"nodeType":"YulBlock","src":"5031:40:4","statements":[{"nodeType":"YulAssignment","src":"5042:22:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5058:5:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5052:5:4"},"nodeType":"YulFunctionCall","src":"5052:12:4"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5042:6:4"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5014:5:4","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5024:6:4","type":""}],"src":"4973:98:4"},{"body":{"nodeType":"YulBlock","src":"5172:73:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5189:3:4"},{"name":"length","nodeType":"YulIdentifier","src":"5194:6:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5182:6:4"},"nodeType":"YulFunctionCall","src":"5182:19:4"},"nodeType":"YulExpressionStatement","src":"5182:19:4"},{"nodeType":"YulAssignment","src":"5210:29:4","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5229:3:4"},{"kind":"number","nodeType":"YulLiteral","src":"5234:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5225:3:4"},"nodeType":"YulFunctionCall","src":"5225:14:4"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"5210:11:4"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5144:3:4","type":""},{"name":"length","nodeType":"YulTypedName","src":"5149:6:4","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"5160:11:4","type":""}],"src":"5077:168:4"},{"body":{"nodeType":"YulBlock","src":"5296:51:4","statements":[{"nodeType":"YulAssignment","src":"5306:35:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5335:5:4"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"5317:17:4"},"nodeType":"YulFunctionCall","src":"5317:24:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5306:7:4"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5278:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5288:7:4","type":""}],"src":"5251:96:4"},{"body":{"nodeType":"YulBlock","src":"5395:48:4","statements":[{"nodeType":"YulAssignment","src":"5405:32:4","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5430:5:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5423:6:4"},"nodeType":"YulFunctionCall","src":"5423:13:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5416:6:4"},"nodeType":"YulFunctionCall","src":"5416:21:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5405:7:4"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5377:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5387:7:4","type":""}],"src":"5353:90:4"},{"body":{"nodeType":"YulBlock","src":"5494:81:4","statements":[{"nodeType":"YulAssignment","src":"5504:65:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5519:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"5526:42:4","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5515:3:4"},"nodeType":"YulFunctionCall","src":"5515:54:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5504:7:4"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5476:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5486:7:4","type":""}],"src":"5449:126:4"},{"body":{"nodeType":"YulBlock","src":"5626:32:4","statements":[{"nodeType":"YulAssignment","src":"5636:16:4","value":{"name":"value","nodeType":"YulIdentifier","src":"5647:5:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5636:7:4"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5608:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5618:7:4","type":""}],"src":"5581:77:4"},{"body":{"nodeType":"YulBlock","src":"5713:258:4","statements":[{"nodeType":"YulVariableDeclaration","src":"5723:10:4","value":{"kind":"number","nodeType":"YulLiteral","src":"5732:1:4","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"5727:1:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"5792:63:4","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5817:3:4"},{"name":"i","nodeType":"YulIdentifier","src":"5822:1:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5813:3:4"},"nodeType":"YulFunctionCall","src":"5813:11:4"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5836:3:4"},{"name":"i","nodeType":"YulIdentifier","src":"5841:1:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5832:3:4"},"nodeType":"YulFunctionCall","src":"5832:11:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5826:5:4"},"nodeType":"YulFunctionCall","src":"5826:18:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5806:6:4"},"nodeType":"YulFunctionCall","src":"5806:39:4"},"nodeType":"YulExpressionStatement","src":"5806:39:4"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5753:1:4"},{"name":"length","nodeType":"YulIdentifier","src":"5756:6:4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5750:2:4"},"nodeType":"YulFunctionCall","src":"5750:13:4"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5764:19:4","statements":[{"nodeType":"YulAssignment","src":"5766:15:4","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5775:1:4"},{"kind":"number","nodeType":"YulLiteral","src":"5778:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5771:3:4"},"nodeType":"YulFunctionCall","src":"5771:10:4"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"5766:1:4"}]}]},"pre":{"nodeType":"YulBlock","src":"5746:3:4","statements":[]},"src":"5742:113:4"},{"body":{"nodeType":"YulBlock","src":"5889:76:4","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5939:3:4"},{"name":"length","nodeType":"YulIdentifier","src":"5944:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5935:3:4"},"nodeType":"YulFunctionCall","src":"5935:16:4"},{"kind":"number","nodeType":"YulLiteral","src":"5953:1:4","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5928:6:4"},"nodeType":"YulFunctionCall","src":"5928:27:4"},"nodeType":"YulExpressionStatement","src":"5928:27:4"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5870:1:4"},{"name":"length","nodeType":"YulIdentifier","src":"5873:6:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5867:2:4"},"nodeType":"YulFunctionCall","src":"5867:13:4"},"nodeType":"YulIf","src":"5864:101:4"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"5695:3:4","type":""},{"name":"dst","nodeType":"YulTypedName","src":"5700:3:4","type":""},{"name":"length","nodeType":"YulTypedName","src":"5705:6:4","type":""}],"src":"5664:307:4"},{"body":{"nodeType":"YulBlock","src":"6020:238:4","statements":[{"nodeType":"YulVariableDeclaration","src":"6030:58:4","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6052:6:4"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6082:4:4"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"6060:21:4"},"nodeType":"YulFunctionCall","src":"6060:27:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6048:3:4"},"nodeType":"YulFunctionCall","src":"6048:40:4"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"6034:10:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"6199:22:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6201:16:4"},"nodeType":"YulFunctionCall","src":"6201:18:4"},"nodeType":"YulExpressionStatement","src":"6201:18:4"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6142:10:4"},{"kind":"number","nodeType":"YulLiteral","src":"6154:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6139:2:4"},"nodeType":"YulFunctionCall","src":"6139:34:4"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6178:10:4"},{"name":"memPtr","nodeType":"YulIdentifier","src":"6190:6:4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6175:2:4"},"nodeType":"YulFunctionCall","src":"6175:22:4"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6136:2:4"},"nodeType":"YulFunctionCall","src":"6136:62:4"},"nodeType":"YulIf","src":"6133:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6237:2:4","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6241:10:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6230:6:4"},"nodeType":"YulFunctionCall","src":"6230:22:4"},"nodeType":"YulExpressionStatement","src":"6230:22:4"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6006:6:4","type":""},{"name":"size","nodeType":"YulTypedName","src":"6014:4:4","type":""}],"src":"5977:281:4"},{"body":{"nodeType":"YulBlock","src":"6292:152:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6309:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6312:77:4","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6302:6:4"},"nodeType":"YulFunctionCall","src":"6302:88:4"},"nodeType":"YulExpressionStatement","src":"6302:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6406:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6409:4:4","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6399:6:4"},"nodeType":"YulFunctionCall","src":"6399:15:4"},"nodeType":"YulExpressionStatement","src":"6399:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6430:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6433:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6423:6:4"},"nodeType":"YulFunctionCall","src":"6423:15:4"},"nodeType":"YulExpressionStatement","src":"6423:15:4"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"6264:180:4"},{"body":{"nodeType":"YulBlock","src":"6478:152:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6495:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6498:77:4","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6488:6:4"},"nodeType":"YulFunctionCall","src":"6488:88:4"},"nodeType":"YulExpressionStatement","src":"6488:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6592:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6595:4:4","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6585:6:4"},"nodeType":"YulFunctionCall","src":"6585:15:4"},"nodeType":"YulExpressionStatement","src":"6585:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6616:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6619:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6609:6:4"},"nodeType":"YulFunctionCall","src":"6609:15:4"},"nodeType":"YulExpressionStatement","src":"6609:15:4"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"6450:180:4"},{"body":{"nodeType":"YulBlock","src":"6725:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6742:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6745:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6735:6:4"},"nodeType":"YulFunctionCall","src":"6735:12:4"},"nodeType":"YulExpressionStatement","src":"6735:12:4"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"6636:117:4"},{"body":{"nodeType":"YulBlock","src":"6848:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6865:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6868:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6858:6:4"},"nodeType":"YulFunctionCall","src":"6858:12:4"},"nodeType":"YulExpressionStatement","src":"6858:12:4"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"6759:117:4"},{"body":{"nodeType":"YulBlock","src":"6971:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6988:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6991:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6981:6:4"},"nodeType":"YulFunctionCall","src":"6981:12:4"},"nodeType":"YulExpressionStatement","src":"6981:12:4"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"6882:117:4"},{"body":{"nodeType":"YulBlock","src":"7094:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7111:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7114:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7104:6:4"},"nodeType":"YulFunctionCall","src":"7104:12:4"},"nodeType":"YulExpressionStatement","src":"7104:12:4"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"7005:117:4"},{"body":{"nodeType":"YulBlock","src":"7217:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7234:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7237:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7227:6:4"},"nodeType":"YulFunctionCall","src":"7227:12:4"},"nodeType":"YulExpressionStatement","src":"7227:12:4"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"7128:117:4"},{"body":{"nodeType":"YulBlock","src":"7299:54:4","statements":[{"nodeType":"YulAssignment","src":"7309:38:4","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7327:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"7334:2:4","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7323:3:4"},"nodeType":"YulFunctionCall","src":"7323:14:4"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7343:2:4","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7339:3:4"},"nodeType":"YulFunctionCall","src":"7339:7:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7319:3:4"},"nodeType":"YulFunctionCall","src":"7319:28:4"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"7309:6:4"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7282:5:4","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"7292:6:4","type":""}],"src":"7251:102:4"},{"body":{"nodeType":"YulBlock","src":"7402:79:4","statements":[{"body":{"nodeType":"YulBlock","src":"7459:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7468:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7471:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7461:6:4"},"nodeType":"YulFunctionCall","src":"7461:12:4"},"nodeType":"YulExpressionStatement","src":"7461:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7425:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7450:5:4"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7432:17:4"},"nodeType":"YulFunctionCall","src":"7432:24:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7422:2:4"},"nodeType":"YulFunctionCall","src":"7422:35:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7415:6:4"},"nodeType":"YulFunctionCall","src":"7415:43:4"},"nodeType":"YulIf","src":"7412:63:4"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7395:5:4","type":""}],"src":"7359:122:4"}]},"contents":"{\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let src := offset\n        if gt(add(src, mul(length, 0x20)), end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0, value1 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":4,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"10":[{"length":32,"start":224},{"length":32,"start":308}],"202":[{"length":32,"start":416}]},"linkReferences":{},"object":"60806040526004361061003f5760003560e01c80631fe543e3146100445780632cfcc5391461006d5780634585e33b146100775780636e04ff0d146100a0575b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906104b1565b6100de565b005b61007561019e565b005b34801561008357600080fd5b5061009e60048036038101906100999190610464565b61030d565b005b3480156100ac57600080fd5b506100c760048036038101906100c29190610464565b610311565b6040516100d592919061058d565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461019057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610187929190610564565b60405180910390fd5b61019a8282610357565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156101f8576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561020c5761020b6106d6565b5b600160149054906101000a900460ff16600181111561022e5761022d6106d6565b5b14610265576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f634f3211e3a4e43fee5a21ad9f87ca153b300fc78b1c557a2057dbe9c63bcb4760405160405180910390a2565b5050565b60006060816040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250915091509250929050565b5050565b600061036e610369846105e2565b6105bd565b905080838252602082019050828560208602820111156103915761039061073e565b5b60005b858110156103c157816103a7888261044f565b845260208401935060208301925050600181019050610394565b5050509392505050565b600082601f8301126103e0576103df610739565b5b81356103f084826020860161035b565b91505092915050565b60008083601f84011261040f5761040e610739565b5b8235905067ffffffffffffffff81111561042c5761042b610734565b5b6020830191508360018202830111156104485761044761073e565b5b9250929050565b60008135905061045e8161075e565b92915050565b6000806020838503121561047b5761047a610748565b5b600083013567ffffffffffffffff81111561049957610498610743565b5b6104a5858286016103f9565b92509250509250929050565b600080604083850312156104c8576104c7610748565b5b60006104d68582860161044f565b925050602083013567ffffffffffffffff8111156104f7576104f6610743565b5b610503858286016103cb565b9150509250929050565b6105168161062a565b82525050565b6105258161063c565b82525050565b60006105368261060e565b6105408185610619565b9350610550818560208601610672565b6105598161074d565b840191505092915050565b6000604082019050610579600083018561050d565b610586602083018461050d565b9392505050565b60006040820190506105a2600083018561051c565b81810360208301526105b4818461052b565b90509392505050565b60006105c76105d8565b90506105d382826106a5565b919050565b6000604051905090565b600067ffffffffffffffff8211156105fd576105fc610705565b5b602082029050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061063582610648565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610690578082015181840152602081019050610675565b8381111561069f576000848401525b50505050565b6106ae8261074d565b810181811067ffffffffffffffff821117156106cd576106cc610705565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61076781610668565b811461077257600080fd5b5056fea2646970667358221220fe5dc2f5bc83667e71f723b83873cda6c1cdf093b9d30440e7529de038ad932364736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x2CFCC539 EQ PUSH2 0x6D JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0xA0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x4B1 JUMP JUMPDEST PUSH2 0xDE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x75 PUSH2 0x19E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x99 SWAP2 SWAP1 PUSH2 0x464 JUMP JUMPDEST PUSH2 0x30D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0x464 JUMP JUMPDEST PUSH2 0x311 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD5 SWAP3 SWAP2 SWAP1 PUSH2 0x58D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x190 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x187 SWAP3 SWAP2 SWAP1 PUSH2 0x564 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x19A DUP3 DUP3 PUSH2 0x357 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x1F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x66D781F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x20C JUMPI PUSH2 0x20B PUSH2 0x6D6 JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x22E JUMPI PUSH2 0x22D PUSH2 0x6D6 JUMP JUMPDEST JUMPDEST EQ PUSH2 0x265 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1425571C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x634F3211E3A4E43FEE5A21AD9F87CA153B300FC78B1C557A2057DBE9C63BCB47 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3078300000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36E PUSH2 0x369 DUP5 PUSH2 0x5E2 JUMP JUMPDEST PUSH2 0x5BD JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x391 JUMPI PUSH2 0x390 PUSH2 0x73E JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3C1 JUMPI DUP2 PUSH2 0x3A7 DUP9 DUP3 PUSH2 0x44F JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x394 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3E0 JUMPI PUSH2 0x3DF PUSH2 0x739 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3F0 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x35B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x40F JUMPI PUSH2 0x40E PUSH2 0x739 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x42C JUMPI PUSH2 0x42B PUSH2 0x734 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x448 JUMPI PUSH2 0x447 PUSH2 0x73E JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x45E DUP2 PUSH2 0x75E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x47B JUMPI PUSH2 0x47A PUSH2 0x748 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x499 JUMPI PUSH2 0x498 PUSH2 0x743 JUMP JUMPDEST JUMPDEST PUSH2 0x4A5 DUP6 DUP3 DUP7 ADD PUSH2 0x3F9 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4C8 JUMPI PUSH2 0x4C7 PUSH2 0x748 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4D6 DUP6 DUP3 DUP7 ADD PUSH2 0x44F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4F7 JUMPI PUSH2 0x4F6 PUSH2 0x743 JUMP JUMPDEST JUMPDEST PUSH2 0x503 DUP6 DUP3 DUP7 ADD PUSH2 0x3CB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x516 DUP2 PUSH2 0x62A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x525 DUP2 PUSH2 0x63C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x536 DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH2 0x540 DUP2 DUP6 PUSH2 0x619 JUMP JUMPDEST SWAP4 POP PUSH2 0x550 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x672 JUMP JUMPDEST PUSH2 0x559 DUP2 PUSH2 0x74D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x579 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x50D JUMP JUMPDEST PUSH2 0x586 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x50D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x5A2 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x51C JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x5B4 DUP2 DUP5 PUSH2 0x52B JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5C7 PUSH2 0x5D8 JUMP JUMPDEST SWAP1 POP PUSH2 0x5D3 DUP3 DUP3 PUSH2 0x6A5 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x5FD JUMPI PUSH2 0x5FC PUSH2 0x705 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x635 DUP3 PUSH2 0x648 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x690 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x675 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x69F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP3 PUSH2 0x74D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x6CD JUMPI PUSH2 0x6CC PUSH2 0x705 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x767 DUP2 PUSH2 0x668 JUMP JUMPDEST DUP2 EQ PUSH2 0x772 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID 0x5D 0xC2 CREATE2 0xBC DUP4 PUSH7 0x7E71F723B83873 0xCD 0xA6 0xC1 0xCD CREATE SWAP4 0xB9 0xD3 DIV BLOCKHASH 0xE7 MSTORE SWAP14 0xE0 CODESIZE 0xAD SWAP4 0x23 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"375:2430:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6618:256:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2058:337:3;;;:::i;:::-;;2593:75;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2403:182;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;6618:256:0;6731:14;6717:28;;:10;:28;;;6713:109;;6788:10;6800:14;6762:53;;;;;;;;;;;;:::i;:::-;;;;;;;;6713:109;6827:42;6846:9;6857:11;6827:18;:42::i;:::-;6618:256;;:::o;2058:337:3:-;2123:13;2111:9;:25;2107:94;;;2160:29;;;;;;;;;;;;;;2107:94;2232:16;2215:33;;;;;;;;:::i;:::-;;:13;;;;;;;;;;;:33;;;;;;;;:::i;:::-;;;2211:90;;2272:17;;;;;;;;;;;;;;2211:90;2311:9;2334:10;2311:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2376:10;2362:25;;;;;;;;;;;;2058:337::o;2593:75::-;;;:::o;2403:182::-;2493:17;2512:24;2557:12;2549:28;;;;;;;;;;;;;;;;;;;;;2403:182;;;;;:::o;2676:126::-;;;:::o;24:722:4:-;120:5;145:81;161:64;218:6;161:64;:::i;:::-;145:81;:::i;:::-;136:90;;246:5;275:6;268:5;261:21;309:4;302:5;298:16;291:23;;335:6;385:3;377:4;369:6;365:17;360:3;356:27;353:36;350:143;;;404:79;;:::i;:::-;350:143;517:1;502:238;527:6;524:1;521:13;502:238;;;595:3;624:37;657:3;645:10;624:37;:::i;:::-;619:3;612:50;691:4;686:3;682:14;675:21;;725:4;720:3;716:14;709:21;;562:178;549:1;546;542:9;537:14;;502:238;;;506:14;126:620;;24:722;;;;;:::o;769:370::-;840:5;889:3;882:4;874:6;870:17;866:27;856:122;;897:79;;:::i;:::-;856:122;1014:6;1001:20;1039:94;1129:3;1121:6;1114:4;1106:6;1102:17;1039:94;:::i;:::-;1030:103;;846:293;769:370;;;;:::o;1158:552::-;1215:8;1225:6;1275:3;1268:4;1260:6;1256:17;1252:27;1242:122;;1283:79;;:::i;:::-;1242:122;1396:6;1383:20;1373:30;;1426:18;1418:6;1415:30;1412:117;;;1448:79;;:::i;:::-;1412:117;1562:4;1554:6;1550:17;1538:29;;1616:3;1608:4;1600:6;1596:17;1586:8;1582:32;1579:41;1576:128;;;1623:79;;:::i;:::-;1576:128;1158:552;;;;;:::o;1716:139::-;1762:5;1800:6;1787:20;1778:29;;1816:33;1843:5;1816:33;:::i;:::-;1716:139;;;;:::o;1861:527::-;1931:6;1939;1988:2;1976:9;1967:7;1963:23;1959:32;1956:119;;;1994:79;;:::i;:::-;1956:119;2142:1;2131:9;2127:17;2114:31;2172:18;2164:6;2161:30;2158:117;;;2194:79;;:::i;:::-;2158:117;2307:64;2363:7;2354:6;2343:9;2339:22;2307:64;:::i;:::-;2289:82;;;;2085:296;1861:527;;;;;:::o;2394:684::-;2487:6;2495;2544:2;2532:9;2523:7;2519:23;2515:32;2512:119;;;2550:79;;:::i;:::-;2512:119;2670:1;2695:53;2740:7;2731:6;2720:9;2716:22;2695:53;:::i;:::-;2685:63;;2641:117;2825:2;2814:9;2810:18;2797:32;2856:18;2848:6;2845:30;2842:117;;;2878:79;;:::i;:::-;2842:117;2983:78;3053:7;3044:6;3033:9;3029:22;2983:78;:::i;:::-;2973:88;;2768:303;2394:684;;;;;:::o;3084:118::-;3171:24;3189:5;3171:24;:::i;:::-;3166:3;3159:37;3084:118;;:::o;3208:109::-;3289:21;3304:5;3289:21;:::i;:::-;3284:3;3277:34;3208:109;;:::o;3323:360::-;3409:3;3437:38;3469:5;3437:38;:::i;:::-;3491:70;3554:6;3549:3;3491:70;:::i;:::-;3484:77;;3570:52;3615:6;3610:3;3603:4;3596:5;3592:16;3570:52;:::i;:::-;3647:29;3669:6;3647:29;:::i;:::-;3642:3;3638:39;3631:46;;3413:270;3323:360;;;;:::o;3689:332::-;3810:4;3848:2;3837:9;3833:18;3825:26;;3861:71;3929:1;3918:9;3914:17;3905:6;3861:71;:::i;:::-;3942:72;4010:2;3999:9;3995:18;3986:6;3942:72;:::i;:::-;3689:332;;;;;:::o;4027:407::-;4160:4;4198:2;4187:9;4183:18;4175:26;;4211:65;4273:1;4262:9;4258:17;4249:6;4211:65;:::i;:::-;4323:9;4317:4;4313:20;4308:2;4297:9;4293:18;4286:48;4351:76;4422:4;4413:6;4351:76;:::i;:::-;4343:84;;4027:407;;;;;:::o;4440:129::-;4474:6;4501:20;;:::i;:::-;4491:30;;4530:33;4558:4;4550:6;4530:33;:::i;:::-;4440:129;;;:::o;4575:75::-;4608:6;4641:2;4635:9;4625:19;;4575:75;:::o;4656:311::-;4733:4;4823:18;4815:6;4812:30;4809:56;;;4845:18;;:::i;:::-;4809:56;4895:4;4887:6;4883:17;4875:25;;4955:4;4949;4945:15;4937:23;;4656:311;;;:::o;4973:98::-;5024:6;5058:5;5052:12;5042:22;;4973:98;;;:::o;5077:168::-;5160:11;5194:6;5189:3;5182:19;5234:4;5229:3;5225:14;5210:29;;5077:168;;;;:::o;5251:96::-;5288:7;5317:24;5335:5;5317:24;:::i;:::-;5306:35;;5251:96;;;:::o;5353:90::-;5387:7;5430:5;5423:13;5416:21;5405:32;;5353:90;;;:::o;5449:126::-;5486:7;5526:42;5519:5;5515:54;5504:65;;5449:126;;;:::o;5581:77::-;5618:7;5647:5;5636:16;;5581:77;;;:::o;5664:307::-;5732:1;5742:113;5756:6;5753:1;5750:13;5742:113;;;5841:1;5836:3;5832:11;5826:18;5822:1;5817:3;5813:11;5806:39;5778:2;5775:1;5771:10;5766:15;;5742:113;;;5873:6;5870:1;5867:13;5864:101;;;5953:1;5944:6;5939:3;5935:16;5928:27;5864:101;5713:258;5664:307;;;:::o;5977:281::-;6060:27;6082:4;6060:27;:::i;:::-;6052:6;6048:40;6190:6;6178:10;6175:22;6154:18;6142:10;6139:34;6136:62;6133:88;;;6201:18;;:::i;:::-;6133:88;6241:10;6237:2;6230:22;6020:238;5977:281;;:::o;6264:180::-;6312:77;6309:1;6302:88;6409:4;6406:1;6399:15;6433:4;6430:1;6423:15;6450:180;6498:77;6495:1;6488:88;6595:4;6592:1;6585:15;6619:4;6616:1;6609:15;6636:117;6745:1;6742;6735:12;6759:117;6868:1;6865;6858:12;6882:117;6991:1;6988;6981:12;7005:117;7114:1;7111;7104:12;7128:117;7237:1;7234;7227:12;7251:102;7292:6;7343:2;7339:7;7334:2;7327:5;7323:14;7319:28;7309:38;;7251:102;;;:::o;7359:122::-;7432:24;7450:5;7432:24;:::i;:::-;7425:5;7422:35;7412:63;;7471:1;7468;7461:12;7412:63;7359:122;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"392600","executionCost":"infinite","totalCost":"infinite"},"external":{"checkUpkeep(bytes)":"infinite","enterRaffle()":"infinite","performUpkeep(bytes)":"496","rawFulfillRandomWords(uint256,uint256[])":"infinite"},"internal":{"fulfillRandomWords(uint256,uint256[] memory)":"13"}},"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","enterRaffle()":"2cfcc539","performUpkeep(bytes)":"4585e33b","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"subscriptionId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"interval\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEntered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\n\\r\\n// Error codes\\r\\n\\r\\nerror Raffle__NotEnoughEthEntered();\\r\\nerror Raffle__NotOpen();\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\r\\n    // enum\\r\\n    enum RaffleState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n\\r\\n    // State Variables\\r\\n    // (coordinator, gaslane,callbackgaslimit,subscriptionid,numofwords,requestconfirmations)\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinatorV2;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_callbackGasLimit;\\r\\n    uint32 private immutable i_subscriptionId;\\r\\n    uint16 constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint16 constant NUM_WORDS = 1;\\r\\n\\r\\n    // Events\\r\\n    event RaffleEntered(address indexed player);\\r\\n\\r\\n    // Lottery Variables\\r\\n    // (entrancefee, players,recentwinner,rafflestate,lasttimestamp,interval)\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    address payable[] private s_players;\\r\\n    address private s_recentWinner;\\r\\n    RaffleState private s_raffleState;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n    uint32 private immutable i_interval;\\r\\n\\r\\n    // order\\r\\n    // 1. vrfcoor 2. entrfee 3. gaslane 4. subid 5. callbacgas 6.interval\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2,\\r\\n        uint256 entranceFee,\\r\\n        bytes32 gasLane,\\r\\n        uint32 subscriptionId,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint32 interval\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_vrfCoordinatorV2 = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_entranceFee = entranceFee;\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        i_interval = interval;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n    }\\r\\n\\r\\n    function enterRaffle() public payable {\\r\\n        if (msg.value < i_entranceFee) {\\r\\n            revert Raffle__NotEnoughEthEntered();\\r\\n        }\\r\\n        if (s_raffleState != RaffleState.OPEN) {\\r\\n            revert Raffle__NotOpen();\\r\\n        }\\r\\n        s_players.push(payable(msg.sender));\\r\\n        emit RaffleEntered(msg.sender);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes calldata checkData\\r\\n    ) external override returns (bool upkeepNeeded, bytes memory performData) {\\r\\n        return (upkeepNeeded, \\\"0x0\\\");\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /*performData*/) external override {}\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 /*requestId*/,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override {}\\r\\n}\\r\\n\",\"keccak256\":\"0x1caa41be48c651e7f7fe3afb157947df19eae9811dcc10cb5a630fdac053b35c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":205,"contract":"contracts/Raffle.sol:Raffle","label":"s_players","offset":0,"slot":"0","type":"t_array(t_address_payable)dyn_storage"},{"astId":207,"contract":"contracts/Raffle.sol:Raffle","label":"s_recentWinner","offset":0,"slot":"1","type":"t_address"},{"astId":210,"contract":"contracts/Raffle.sol:Raffle","label":"s_raffleState","offset":20,"slot":"1","type":"t_enum(RaffleState)181"},{"astId":212,"contract":"contracts/Raffle.sol:Raffle","label":"s_lastTimeStamp","offset":0,"slot":"2","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_address_payable)dyn_storage":{"base":"t_address_payable","encoding":"dynamic_array","label":"address payable[]","numberOfBytes":"32"},"t_enum(RaffleState)181":{"encoding":"inplace","label":"enum Raffle.RaffleState","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."}},"version":1}}}}}}